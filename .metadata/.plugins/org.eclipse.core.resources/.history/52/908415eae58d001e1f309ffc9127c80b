/*
 * STM32F407xx_GPIO_Driver.c
 *
 *  Created on: Oct 19, 2023
 *      Author: Ubaid
 */
#include <stdio.h>
#include<stdint.h>
#include<stdlib.h>
#include <STM32F407xx_GPIO_Driver_Definitions_Public.h>
#include <STM32F407xx_GPIO_Driver_Definitions_Private.h>
#include <STM32F407xx_Board_Definitions_Private.h>

void GPIO_PeriClockControl(struct GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
	if (EnorDi == ENABLE) {
		if (pGPIOx == GPIOA) {
			GPIOA_PCLK_EN();
		} else if (pGPIOx == GPIOB) {
			GPIOB_PCLK_EN();
		} else if (pGPIOx == GPIOC) {
			GPIOC_PCLK_EN();
		} else if (pGPIOx == GPIOD) {
			GPIOD_PCLK_EN();
		} else if (pGPIOx == GPIOE) {
			GPIOE_PCLK_EN();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_EN();
		} else if (pGPIOx == GPIOG) {
			GPIOG_PCLK_EN();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_EN();
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_EN();
		} else {
			/* Handle default error*/
		}
	} else {
		if (pGPIOx == GPIOA) {
			GPIOA_PCLK_DI();
		} else if (pGPIOx == GPIOB) {
			GPIOB_PCLK_DI();
		} else if (pGPIOx == GPIOC) {
			GPIOC_PCLK_DI();
		} else if (pGPIOx == GPIOD) {
			GPIOD_PCLK_DI();
		} else if (pGPIOx == GPIOE) {
			GPIOE_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		} else if (pGPIOx == GPIOG) {
			GPIOG_PCLK_DI();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		} else {
			/* Handle default error*/
		}

	}
}

void GPIO_Init(GPIO_Config_UserHandle_t* UserHandle) {
	uint32_t l_set_var = 0;

	UserHandle->Private_GPIO_Reg_Data = (struct GPIO_RegDef_t*) malloc(
			sizeof(struct GPIO_RegDef_t));

	UserHandle->Private_GPIO_User_Data = (struct GPIO_PinConfig_t*) malloc(
			sizeof(struct GPIO_PinConfig_t));

	//Initialize GPIO pin number into private data
	if ((UserHandle->Private_GPIO_Reg_Data != NULL)
			&& (UserHandle->Private_GPIO_User_Data != NULL)) {
		UserHandle->Private_GPIO_User_Data->GPIO_PinNumber =
				UserHandle->GPIO_PIN_NUM;

		//point to requested GPIO base address to init private instance and enable clock
		if (UserHandle->GPIO_PORT == PORT_GPIOA) {
			UserHandle->Private_GPIO_Reg_Data = GPIOA;
			GPIO_PeriClockControl(GPIOA, ENABLE);
		} else if (UserHandle->GPIO_PORT == PORT_GPIOB) {
			UserHandle->Private_GPIO_Reg_Data = GPIOB;
			GPIO_PeriClockControl(GPIOB, ENABLE);
		} else if (UserHandle->GPIO_PORT == PORT_GPIOC) {
			UserHandle->Private_GPIO_Reg_Data = GPIOC;
			GPIO_PeriClockControl(GPIOC, ENABLE);
		} else if (UserHandle->GPIO_PORT == PORT_GPIOD) {
			UserHandle->Private_GPIO_Reg_Data = GPIOD;
			GPIO_PeriClockControl(GPIOD, ENABLE);
		} else if (UserHandle->GPIO_PORT == PORT_GPIOE) {
			UserHandle->Private_GPIO_Reg_Data = GPIOE;
			GPIO_PeriClockControl(GPIOE, ENABLE);
		} else if (UserHandle->GPIO_PORT == PORT_GPIOF) {
			UserHandle->Private_GPIO_Reg_Data = GPIOF;
			GPIO_PeriClockControl(GPIOF, ENABLE);
		} else if (UserHandle->GPIO_PORT == PORT_GPIOG) {
			UserHandle->Private_GPIO_Reg_Data = GPIOG;
			GPIO_PeriClockControl(GPIOG, ENABLE);
		} else if (UserHandle->GPIO_PORT == PORT_GPIOH) {
			UserHandle->Private_GPIO_Reg_Data = GPIOH;
			GPIO_PeriClockControl(GPIOH, ENABLE);
		} else if (UserHandle->GPIO_PORT == PORT_GPIOI) {
			UserHandle->Private_GPIO_Reg_Data = GPIOI;
			GPIO_PeriClockControl(GPIOI, ENABLE);
		} else {
			//Handle error
		}

		//	2. configure MODE of GPIO
		if (UserHandle->GPIO_PIN_MODE <= GPIO_MODE_ANALOG) {
			UserHandle->Private_GPIO_User_Data->GPIO_PinMode =
					UserHandle->GPIO_PIN_MODE;
			l_set_var = (UserHandle->Private_GPIO_User_Data->GPIO_PinMode)
					<< (2 * UserHandle->Private_GPIO_User_Data->GPIO_PinNumber);
			UserHandle->Private_GPIO_Reg_Data->MODER &= ~(0x3
					<< (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber)); //Clear only bits being set
			UserHandle->Private_GPIO_Reg_Data->MODER |= l_set_var;
			l_set_var = 0;
		} else {
			l_set_var = 0;
			//interrupt handling
		}

		//	3. Configure SPEED reg
		UserHandle->Private_GPIO_User_Data->GPIO_PinSpeed =
				UserHandle->GPIO_SPEED_TYPE;
		l_set_var = (UserHandle->Private_GPIO_User_Data->GPIO_PinSpeed)
				<< (2 * UserHandle->Private_GPIO_User_Data->GPIO_PinNumber);
		UserHandle->Private_GPIO_Reg_Data->OSPEEDR &= ~(0x3
				<< (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber)); //Clear only bits being set
		UserHandle->Private_GPIO_Reg_Data->OSPEEDR |= l_set_var;
		l_set_var = 0;

		//	4. Configure Pu-PD registers
		UserHandle->Private_GPIO_User_Data->GPIO_PinPuPdControl =
				UserHandle->GPIO_PUPD_TYPE;
		l_set_var = (UserHandle->Private_GPIO_User_Data->GPIO_PinPuPdControl)
				<< (2 * UserHandle->Private_GPIO_User_Data->GPIO_PinNumber);
		UserHandle->Private_GPIO_Reg_Data->PUPDR &= ~(0x3
				<< (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber)); //Clear only bits being set
		UserHandle->Private_GPIO_Reg_Data->PUPDR |= l_set_var;
		l_set_var = 0;

		//	5. Configure Output type only for Output configurations
		if (UserHandle->GPIO_PIN_MODE == GPIO_MODE_OUT) {
			UserHandle->Private_GPIO_User_Data->GPIO_PinOPType =
					UserHandle->GPIO_OUTPUT_TYPE;
			l_set_var = (UserHandle->Private_GPIO_User_Data->GPIO_PinOPType)
					<< (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber);
			UserHandle->Private_GPIO_Reg_Data->OTYPER &= ~(0x1
					<< (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber)); //Clear only bits being set
			UserHandle->Private_GPIO_Reg_Data->OTYPER |= l_set_var;
			l_set_var = 0;
		}

		//	6. Configure Alternate functionality register
		if (UserHandle->GPIO_PIN_MODE == GPIO_MODE_ALTFN) {
			UserHandle->Private_GPIO_User_Data->GPIO_PinAltFunMode =
					UserHandle->Alt_Func_Mode;

			if (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber >= 8) {
				UserHandle->Private_GPIO_Reg_Data->AFRL &=
						~(0xF
								<< (4
										* (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber
												% 8))); //Clear only bits being set
				UserHandle->Private_GPIO_Reg_Data->AFRL |=
						(UserHandle->Private_GPIO_User_Data->GPIO_PinAltFunMode
								<< (4
										* (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber
												% 8)));
			} else {
				UserHandle->Private_GPIO_Reg_Data->AFRH &=
						~(0xF
								<< (4
										* UserHandle->Private_GPIO_User_Data->GPIO_PinNumber)); //Clear only bits being set
				UserHandle->Private_GPIO_Reg_Data->AFRH |=
						(UserHandle->Private_GPIO_User_Data->GPIO_PinAltFunMode
								<< (4
										* (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber)));

			}
		}
	} else {
		//Handle memory alloc error
	}

}

void GPIO_DeInit(GPIO_Config_UserHandle_t UserHandle) {
	//point to requested GPIO base address to de-init private instance and disable clock
	if (UserHandle.GPIO_PORT == PORT_GPIOA) {
		GPIOA_REG_RESET();
		GPIO_PeriClockControl(GPIOA, DISABLE);
	} else if (UserHandle.GPIO_PORT == PORT_GPIOB) {
		GPIOB_REG_RESET();
		GPIO_PeriClockControl(GPIOB, DISABLE);
	} else if (UserHandle.GPIO_PORT == PORT_GPIOC) {
		GPIOC_REG_RESET();
		GPIO_PeriClockControl(GPIOC, DISABLE);
	} else if (UserHandle.GPIO_PORT == PORT_GPIOD) {
		GPIOD_REG_RESET();
		GPIO_PeriClockControl(GPIOD, DISABLE);
	} else if (UserHandle.GPIO_PORT == PORT_GPIOE) {
		GPIOE_REG_RESET();
		GPIO_PeriClockControl(GPIOE, DISABLE);
	} else if (UserHandle.GPIO_PORT == PORT_GPIOF) {
		GPIOF_REG_RESET();
		GPIO_PeriClockControl(GPIOF, DISABLE);
	} else if (UserHandle.GPIO_PORT == PORT_GPIOG) {
		GPIOG_REG_RESET();
		GPIO_PeriClockControl(GPIOG, DISABLE);
	} else if (UserHandle.GPIO_PORT == PORT_GPIOH) {
		GPIOH_REG_RESET();
		GPIO_PeriClockControl(GPIOH, DISABLE);
	} else if (UserHandle.GPIO_PORT == PORT_GPIOI) {
		GPIOI_REG_RESET();
		GPIO_PeriClockControl(GPIOI, DISABLE);
	} else {
		//Handle error
	}

	free(UserHandle.Private_GPIO_Reg_Data);
	free(UserHandle.Private_GPIO_User_Data);
	UserHandle.Private_GPIO_Reg_Data = NULL;
	UserHandle.Private_GPIO_User_Data = NULL;
}

bool GPIO_ReadFromInputPin(GPIO_Config_UserHandle_t UserHandle)
{
	bool l_value=0;
	l_value = ((UserHandle.Private_GPIO_Reg_Data->IDR) >> (UserHandle.Private_GPIO_User_Data->GPIO_PinNumber)) & (0x00000001);

	return l_value;
}

uint16_t GPIO_ReadFromInputPort(GPIO_Config_UserHandle_t UserHandle)
{
	uint16_t l_value=0;
	l_value = (uint16_t)(UserHandle.Private_GPIO_Reg_Data->IDR);
	return l_value;
}

void GPIO_WriteToOutputPin(GPIO_Config_UserHandle_t UserHandle, uint8_t l_value)
{
	if(l_value == GPIO_PIN_SET)
	{
		UserHandle.Private_GPIO_Reg_Data->ODR |= (l_value << UserHandle.Private_GPIO_User_Data->GPIO_PinNumber);
	}
	else
	{
		UserHandle.Private_GPIO_Reg_Data->ODR &= ~(l_value << UserHandle.Private_GPIO_User_Data->GPIO_PinNumber);
	}
}

void GPIO_WriteToOutputPort(GPIO_Config_UserHandle_t UserHandle, uint16_t l_value, bool operation)
{
	if(operation == GPIO_PIN_SET)
	{
		UserHandle.Private_GPIO_Reg_Data->ODR |= (0xFFFF);
	}
	else
	{
		UserHandle.Private_GPIO_Reg_Data->ODR &= ~(0xFFFF);
	}
}

void GPIO_ToggleOutputPin(GPIO_Config_UserHandle_t* UserHandle)
{
	UserHandle->Private_GPIO_Reg_Data->ODR ^= (1 << UserHandle->GPIO_PIN_NUM);
}
