
STM32F407xx_GPIO_Driver_In_Objective_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001158  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001300  08001300  00011300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001310  08001310  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001310  08001310  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001310  08001310  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001310  08001310  00011310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001314  08001314  00011314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000017c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001307  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000054d  00000000  00000000  000213d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000178  00000000  00000000  00021920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000104  00000000  00000000  00021a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000350b  00000000  00000000  00021b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000216a  00000000  00000000  000250a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000bb62  00000000  00000000  00027211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000b78  00000000  00000000  00032d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a8  00000000  00000000  000338ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000005c 	.word	0x2000005c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080012e8 	.word	0x080012e8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000060 	.word	0x20000060
 80001e4:	080012e8 	.word	0x080012e8

080001e8 <GPIO_PeriClockControl>:
#include<stdlib.h>
#include <STM32F407xx_GPIO_Driver_Definitions_Public.h>
#include <STM32F407xx_GPIO_Driver_Definitions_Private.h>
#include <STM32F407xx_Board_Definitions_Private.h>

void GPIO_PeriClockControl(struct GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d162      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA) {
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a64      	ldr	r2, [pc, #400]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000202:	4b64      	ldr	r3, [pc, #400]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a63      	ldr	r2, [pc, #396]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
		} else {
			/* Handle default error*/
		}

	}
}
 800020e:	e0b9      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a61      	ldr	r2, [pc, #388]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b5e      	ldr	r3, [pc, #376]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a5d      	ldr	r2, [pc, #372]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e0ae      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a5c      	ldr	r2, [pc, #368]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a58      	ldr	r2, [pc, #352]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a53      	ldr	r2, [pc, #332]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4f      	ldr	r2, [pc, #316]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a4a      	ldr	r2, [pc, #296]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a46      	ldr	r2, [pc, #280]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d168      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a33      	ldr	r2, [pc, #204]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2f      	ldr	r2, [pc, #188]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e4:	f023 0302 	bic.w	r3, r3, #2
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2b      	ldr	r2, [pc, #172]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002fa:	f023 0304 	bic.w	r3, r3, #4
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a26      	ldr	r2, [pc, #152]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000310:	f023 0308 	bic.w	r3, r3, #8
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a22      	ldr	r2, [pc, #136]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000326:	f023 0310 	bic.w	r3, r3, #16
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800033c:	f023 0320 	bic.w	r3, r3, #32
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a10      	ldr	r2, [pc, #64]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00
 80003b4:	40022000 	.word	0x40022000

080003b8 <GPIO_Init>:

void GPIO_Init(GPIO_Config_UserHandle_t* UserHandle) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	uint32_t l_set_var = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]

	UserHandle->Private_GPIO_Reg_Data = (struct GPIO_RegDef_t*) malloc(
 80003c4:	2028      	movs	r0, #40	; 0x28
 80003c6:	f000 fae1 	bl	800098c <malloc>
 80003ca:	4603      	mov	r3, r0
 80003cc:	461a      	mov	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	601a      	str	r2, [r3, #0]
			sizeof(struct GPIO_RegDef_t));

	UserHandle->Private_GPIO_User_Data = (struct GPIO_PinConfig_t*) malloc(
 80003d2:	2006      	movs	r0, #6
 80003d4:	f000 fada 	bl	800098c <malloc>
 80003d8:	4603      	mov	r3, r0
 80003da:	461a      	mov	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	605a      	str	r2, [r3, #4]
			sizeof(struct GPIO_PinConfig_t));

	//Initialize GPIO pin number into private data
	if ((UserHandle->Private_GPIO_Reg_Data != NULL)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	f000 818c 	beq.w	8000702 <GPIO_Init+0x34a>
			&& (UserHandle->Private_GPIO_User_Data != NULL)) {
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	f000 8187 	beq.w	8000702 <GPIO_Init+0x34a>
		UserHandle->Private_GPIO_User_Data->GPIO_PinNumber =
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	685b      	ldr	r3, [r3, #4]
				UserHandle->GPIO_PIN_NUM;
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	7a52      	ldrb	r2, [r2, #9]
		UserHandle->Private_GPIO_User_Data->GPIO_PinNumber =
 80003fc:	701a      	strb	r2, [r3, #0]

		//point to requested GPIO base address to init private instance and enable clock
		if (UserHandle->GPIO_PORT == PORT_GPIOA) {
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	7a1b      	ldrb	r3, [r3, #8]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d107      	bne.n	8000416 <GPIO_Init+0x5e>
			UserHandle->Private_GPIO_Reg_Data = GPIOA;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a49      	ldr	r2, [pc, #292]	; (8000530 <GPIO_Init+0x178>)
 800040a:	601a      	str	r2, [r3, #0]
			GPIO_PeriClockControl(GPIOA, ENABLE);
 800040c:	2101      	movs	r1, #1
 800040e:	4848      	ldr	r0, [pc, #288]	; (8000530 <GPIO_Init+0x178>)
 8000410:	f7ff feea 	bl	80001e8 <GPIO_PeriClockControl>
 8000414:	e05e      	b.n	80004d4 <GPIO_Init+0x11c>
		} else if (UserHandle->GPIO_PORT == PORT_GPIOB) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	7a1b      	ldrb	r3, [r3, #8]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d107      	bne.n	800042e <GPIO_Init+0x76>
			UserHandle->Private_GPIO_Reg_Data = GPIOB;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a44      	ldr	r2, [pc, #272]	; (8000534 <GPIO_Init+0x17c>)
 8000422:	601a      	str	r2, [r3, #0]
			GPIO_PeriClockControl(GPIOB, ENABLE);
 8000424:	2101      	movs	r1, #1
 8000426:	4843      	ldr	r0, [pc, #268]	; (8000534 <GPIO_Init+0x17c>)
 8000428:	f7ff fede 	bl	80001e8 <GPIO_PeriClockControl>
 800042c:	e052      	b.n	80004d4 <GPIO_Init+0x11c>
		} else if (UserHandle->GPIO_PORT == PORT_GPIOC) {
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	7a1b      	ldrb	r3, [r3, #8]
 8000432:	2b02      	cmp	r3, #2
 8000434:	d107      	bne.n	8000446 <GPIO_Init+0x8e>
			UserHandle->Private_GPIO_Reg_Data = GPIOC;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a3f      	ldr	r2, [pc, #252]	; (8000538 <GPIO_Init+0x180>)
 800043a:	601a      	str	r2, [r3, #0]
			GPIO_PeriClockControl(GPIOC, ENABLE);
 800043c:	2101      	movs	r1, #1
 800043e:	483e      	ldr	r0, [pc, #248]	; (8000538 <GPIO_Init+0x180>)
 8000440:	f7ff fed2 	bl	80001e8 <GPIO_PeriClockControl>
 8000444:	e046      	b.n	80004d4 <GPIO_Init+0x11c>
		} else if (UserHandle->GPIO_PORT == PORT_GPIOD) {
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	7a1b      	ldrb	r3, [r3, #8]
 800044a:	2b03      	cmp	r3, #3
 800044c:	d107      	bne.n	800045e <GPIO_Init+0xa6>
			UserHandle->Private_GPIO_Reg_Data = GPIOD;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a3a      	ldr	r2, [pc, #232]	; (800053c <GPIO_Init+0x184>)
 8000452:	601a      	str	r2, [r3, #0]
			GPIO_PeriClockControl(GPIOD, ENABLE);
 8000454:	2101      	movs	r1, #1
 8000456:	4839      	ldr	r0, [pc, #228]	; (800053c <GPIO_Init+0x184>)
 8000458:	f7ff fec6 	bl	80001e8 <GPIO_PeriClockControl>
 800045c:	e03a      	b.n	80004d4 <GPIO_Init+0x11c>
		} else if (UserHandle->GPIO_PORT == PORT_GPIOE) {
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	7a1b      	ldrb	r3, [r3, #8]
 8000462:	2b04      	cmp	r3, #4
 8000464:	d107      	bne.n	8000476 <GPIO_Init+0xbe>
			UserHandle->Private_GPIO_Reg_Data = GPIOE;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a35      	ldr	r2, [pc, #212]	; (8000540 <GPIO_Init+0x188>)
 800046a:	601a      	str	r2, [r3, #0]
			GPIO_PeriClockControl(GPIOE, ENABLE);
 800046c:	2101      	movs	r1, #1
 800046e:	4834      	ldr	r0, [pc, #208]	; (8000540 <GPIO_Init+0x188>)
 8000470:	f7ff feba 	bl	80001e8 <GPIO_PeriClockControl>
 8000474:	e02e      	b.n	80004d4 <GPIO_Init+0x11c>
		} else if (UserHandle->GPIO_PORT == PORT_GPIOF) {
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	7a1b      	ldrb	r3, [r3, #8]
 800047a:	2b05      	cmp	r3, #5
 800047c:	d107      	bne.n	800048e <GPIO_Init+0xd6>
			UserHandle->Private_GPIO_Reg_Data = GPIOF;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a30      	ldr	r2, [pc, #192]	; (8000544 <GPIO_Init+0x18c>)
 8000482:	601a      	str	r2, [r3, #0]
			GPIO_PeriClockControl(GPIOF, ENABLE);
 8000484:	2101      	movs	r1, #1
 8000486:	482f      	ldr	r0, [pc, #188]	; (8000544 <GPIO_Init+0x18c>)
 8000488:	f7ff feae 	bl	80001e8 <GPIO_PeriClockControl>
 800048c:	e022      	b.n	80004d4 <GPIO_Init+0x11c>
		} else if (UserHandle->GPIO_PORT == PORT_GPIOG) {
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	7a1b      	ldrb	r3, [r3, #8]
 8000492:	2b06      	cmp	r3, #6
 8000494:	d107      	bne.n	80004a6 <GPIO_Init+0xee>
			UserHandle->Private_GPIO_Reg_Data = GPIOG;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a2b      	ldr	r2, [pc, #172]	; (8000548 <GPIO_Init+0x190>)
 800049a:	601a      	str	r2, [r3, #0]
			GPIO_PeriClockControl(GPIOG, ENABLE);
 800049c:	2101      	movs	r1, #1
 800049e:	482a      	ldr	r0, [pc, #168]	; (8000548 <GPIO_Init+0x190>)
 80004a0:	f7ff fea2 	bl	80001e8 <GPIO_PeriClockControl>
 80004a4:	e016      	b.n	80004d4 <GPIO_Init+0x11c>
		} else if (UserHandle->GPIO_PORT == PORT_GPIOH) {
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	7a1b      	ldrb	r3, [r3, #8]
 80004aa:	2b07      	cmp	r3, #7
 80004ac:	d107      	bne.n	80004be <GPIO_Init+0x106>
			UserHandle->Private_GPIO_Reg_Data = GPIOH;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a26      	ldr	r2, [pc, #152]	; (800054c <GPIO_Init+0x194>)
 80004b2:	601a      	str	r2, [r3, #0]
			GPIO_PeriClockControl(GPIOH, ENABLE);
 80004b4:	2101      	movs	r1, #1
 80004b6:	4825      	ldr	r0, [pc, #148]	; (800054c <GPIO_Init+0x194>)
 80004b8:	f7ff fe96 	bl	80001e8 <GPIO_PeriClockControl>
 80004bc:	e00a      	b.n	80004d4 <GPIO_Init+0x11c>
		} else if (UserHandle->GPIO_PORT == PORT_GPIOI) {
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	7a1b      	ldrb	r3, [r3, #8]
 80004c2:	2b08      	cmp	r3, #8
 80004c4:	d106      	bne.n	80004d4 <GPIO_Init+0x11c>
			UserHandle->Private_GPIO_Reg_Data = GPIOI;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a21      	ldr	r2, [pc, #132]	; (8000550 <GPIO_Init+0x198>)
 80004ca:	601a      	str	r2, [r3, #0]
			GPIO_PeriClockControl(GPIOI, ENABLE);
 80004cc:	2101      	movs	r1, #1
 80004ce:	4820      	ldr	r0, [pc, #128]	; (8000550 <GPIO_Init+0x198>)
 80004d0:	f7ff fe8a 	bl	80001e8 <GPIO_PeriClockControl>
		} else {
			//Handle error
		}

		//	2. configure MODE of GPIO
		if (UserHandle->GPIO_PIN_MODE <= GPIO_MODE_ANALOG) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	7a9b      	ldrb	r3, [r3, #10]
 80004d8:	2b03      	cmp	r3, #3
 80004da:	d83b      	bhi.n	8000554 <GPIO_Init+0x19c>
			UserHandle->Private_GPIO_User_Data->GPIO_PinMode =
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	685b      	ldr	r3, [r3, #4]
					UserHandle->GPIO_PIN_MODE;
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	7a92      	ldrb	r2, [r2, #10]
			UserHandle->Private_GPIO_User_Data->GPIO_PinMode =
 80004e4:	705a      	strb	r2, [r3, #1]
			l_set_var = (UserHandle->Private_GPIO_User_Data->GPIO_PinMode)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	785b      	ldrb	r3, [r3, #1]
 80004ec:	461a      	mov	r2, r3
					<< (2 * UserHandle->Private_GPIO_User_Data->GPIO_PinNumber);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
			l_set_var = (UserHandle->Private_GPIO_User_Data->GPIO_PinMode)
 80004fa:	60fb      	str	r3, [r7, #12]
			UserHandle->Private_GPIO_Reg_Data->MODER &= ~(0x3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	681a      	ldr	r2, [r3, #0]
					<< (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber)); //Clear only bits being set
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4619      	mov	r1, r3
 800050a:	2303      	movs	r3, #3
 800050c:	408b      	lsls	r3, r1
			UserHandle->Private_GPIO_Reg_Data->MODER &= ~(0x3
 800050e:	43db      	mvns	r3, r3
 8000510:	4619      	mov	r1, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	400a      	ands	r2, r1
 8000518:	601a      	str	r2, [r3, #0]
			UserHandle->Private_GPIO_Reg_Data->MODER |= l_set_var;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	430a      	orrs	r2, r1
 8000528:	601a      	str	r2, [r3, #0]
			l_set_var = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	e013      	b.n	8000558 <GPIO_Init+0x1a0>
 8000530:	40020000 	.word	0x40020000
 8000534:	40020400 	.word	0x40020400
 8000538:	40020800 	.word	0x40020800
 800053c:	40020c00 	.word	0x40020c00
 8000540:	40021000 	.word	0x40021000
 8000544:	40021400 	.word	0x40021400
 8000548:	40021800 	.word	0x40021800
 800054c:	40021c00 	.word	0x40021c00
 8000550:	40022000 	.word	0x40022000
		} else {
			l_set_var = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
			//interrupt handling
		}

		//	3. Configure SPEED reg
		UserHandle->Private_GPIO_User_Data->GPIO_PinSpeed =
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	685b      	ldr	r3, [r3, #4]
				UserHandle->GPIO_SPEED_TYPE;
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7b52      	ldrb	r2, [r2, #13]
		UserHandle->Private_GPIO_User_Data->GPIO_PinSpeed =
 8000560:	709a      	strb	r2, [r3, #2]
		l_set_var = (UserHandle->Private_GPIO_User_Data->GPIO_PinSpeed)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	789b      	ldrb	r3, [r3, #2]
 8000568:	461a      	mov	r2, r3
				<< (2 * UserHandle->Private_GPIO_User_Data->GPIO_PinNumber);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	fa02 f303 	lsl.w	r3, r2, r3
		l_set_var = (UserHandle->Private_GPIO_User_Data->GPIO_PinSpeed)
 8000576:	60fb      	str	r3, [r7, #12]
		UserHandle->Private_GPIO_Reg_Data->OSPEEDR &= ~(0x3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	689a      	ldr	r2, [r3, #8]
				<< (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber)); //Clear only bits being set
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4619      	mov	r1, r3
 8000586:	2303      	movs	r3, #3
 8000588:	408b      	lsls	r3, r1
		UserHandle->Private_GPIO_Reg_Data->OSPEEDR &= ~(0x3
 800058a:	43db      	mvns	r3, r3
 800058c:	4619      	mov	r1, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	400a      	ands	r2, r1
 8000594:	609a      	str	r2, [r3, #8]
		UserHandle->Private_GPIO_Reg_Data->OSPEEDR |= l_set_var;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6899      	ldr	r1, [r3, #8]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	430a      	orrs	r2, r1
 80005a4:	609a      	str	r2, [r3, #8]
		l_set_var = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]

		//	4. Configure Pu-PD registers
		UserHandle->Private_GPIO_User_Data->GPIO_PinPuPdControl =
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
				UserHandle->GPIO_PUPD_TYPE;
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7b12      	ldrb	r2, [r2, #12]
		UserHandle->Private_GPIO_User_Data->GPIO_PinPuPdControl =
 80005b2:	70da      	strb	r2, [r3, #3]
		l_set_var = (UserHandle->Private_GPIO_User_Data->GPIO_PinPuPdControl)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	78db      	ldrb	r3, [r3, #3]
 80005ba:	461a      	mov	r2, r3
				<< (2 * UserHandle->Private_GPIO_User_Data->GPIO_PinNumber);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
		l_set_var = (UserHandle->Private_GPIO_User_Data->GPIO_PinPuPdControl)
 80005c8:	60fb      	str	r3, [r7, #12]
		UserHandle->Private_GPIO_Reg_Data->PUPDR &= ~(0x3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	68da      	ldr	r2, [r3, #12]
				<< (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber)); //Clear only bits being set
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4619      	mov	r1, r3
 80005d8:	2303      	movs	r3, #3
 80005da:	408b      	lsls	r3, r1
		UserHandle->Private_GPIO_Reg_Data->PUPDR &= ~(0x3
 80005dc:	43db      	mvns	r3, r3
 80005de:	4619      	mov	r1, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	400a      	ands	r2, r1
 80005e6:	60da      	str	r2, [r3, #12]
		UserHandle->Private_GPIO_Reg_Data->PUPDR |= l_set_var;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	68d9      	ldr	r1, [r3, #12]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	60da      	str	r2, [r3, #12]
		l_set_var = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]

		//	5. Configure Output type only for Output configurations
		if (UserHandle->GPIO_PIN_MODE == GPIO_MODE_OUT) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	7a9b      	ldrb	r3, [r3, #10]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d127      	bne.n	8000654 <GPIO_Init+0x29c>
			UserHandle->Private_GPIO_User_Data->GPIO_PinOPType =
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685b      	ldr	r3, [r3, #4]
					UserHandle->GPIO_OUTPUT_TYPE;
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	7ad2      	ldrb	r2, [r2, #11]
			UserHandle->Private_GPIO_User_Data->GPIO_PinOPType =
 800060c:	711a      	strb	r2, [r3, #4]
			l_set_var = (UserHandle->Private_GPIO_User_Data->GPIO_PinOPType)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	791b      	ldrb	r3, [r3, #4]
 8000614:	461a      	mov	r2, r3
					<< (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
			l_set_var = (UserHandle->Private_GPIO_User_Data->GPIO_PinOPType)
 8000620:	60fb      	str	r3, [r7, #12]
			UserHandle->Private_GPIO_Reg_Data->OTYPER &= ~(0x1
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	685a      	ldr	r2, [r3, #4]
					<< (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber)); //Clear only bits being set
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4619      	mov	r1, r3
 8000630:	2301      	movs	r3, #1
 8000632:	408b      	lsls	r3, r1
			UserHandle->Private_GPIO_Reg_Data->OTYPER &= ~(0x1
 8000634:	43db      	mvns	r3, r3
 8000636:	4619      	mov	r1, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	400a      	ands	r2, r1
 800063e:	605a      	str	r2, [r3, #4]
			UserHandle->Private_GPIO_Reg_Data->OTYPER |= l_set_var;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6859      	ldr	r1, [r3, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	430a      	orrs	r2, r1
 800064e:	605a      	str	r2, [r3, #4]
			l_set_var = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
		}

		//	6. Configure Alternate functionality register
		if (UserHandle->GPIO_PIN_MODE == GPIO_MODE_ALTFN) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	7a9b      	ldrb	r3, [r3, #10]
 8000658:	2b02      	cmp	r3, #2
 800065a:	d152      	bne.n	8000702 <GPIO_Init+0x34a>
			UserHandle->Private_GPIO_User_Data->GPIO_PinAltFunMode =
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	685b      	ldr	r3, [r3, #4]
					UserHandle->Alt_Func_Mode;
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	7b92      	ldrb	r2, [r2, #14]
			UserHandle->Private_GPIO_User_Data->GPIO_PinAltFunMode =
 8000664:	715a      	strb	r2, [r3, #5]

			if (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber >= 8) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b07      	cmp	r3, #7
 800066e:	d926      	bls.n	80006be <GPIO_Init+0x306>
				UserHandle->Private_GPIO_Reg_Data->AFRL &=
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6a1a      	ldr	r2, [r3, #32]
						~(0xF
								<< (4
										* (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
												% 8))); //Clear only bits being set
 800067c:	f003 0307 	and.w	r3, r3, #7
										* (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber
 8000680:	009b      	lsls	r3, r3, #2
								<< (4
 8000682:	210f      	movs	r1, #15
 8000684:	fa01 f303 	lsl.w	r3, r1, r3
						~(0xF
 8000688:	43db      	mvns	r3, r3
 800068a:	4619      	mov	r1, r3
				UserHandle->Private_GPIO_Reg_Data->AFRL &=
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	400a      	ands	r2, r1
 8000692:	621a      	str	r2, [r3, #32]
				UserHandle->Private_GPIO_Reg_Data->AFRL |=
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a1a      	ldr	r2, [r3, #32]
						(UserHandle->Private_GPIO_User_Data->GPIO_PinAltFunMode
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	795b      	ldrb	r3, [r3, #5]
 80006a0:	4619      	mov	r1, r3
								<< (4
										* (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	781b      	ldrb	r3, [r3, #0]
												% 8)));
 80006a8:	f003 0307 	and.w	r3, r3, #7
										* (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber
 80006ac:	009b      	lsls	r3, r3, #2
								<< (4
 80006ae:	fa01 f303 	lsl.w	r3, r1, r3
 80006b2:	4619      	mov	r1, r3
				UserHandle->Private_GPIO_Reg_Data->AFRL |=
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	430a      	orrs	r2, r1
 80006ba:	621a      	str	r2, [r3, #32]
		}
	} else {
		//Handle memory alloc error
	}

}
 80006bc:	e021      	b.n	8000702 <GPIO_Init+0x34a>
				UserHandle->Private_GPIO_Reg_Data->AFRH &=
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
										* UserHandle->Private_GPIO_User_Data->GPIO_PinNumber)); //Clear only bits being set
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	009b      	lsls	r3, r3, #2
								<< (4
 80006cc:	210f      	movs	r1, #15
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
						~(0xF
 80006d2:	43db      	mvns	r3, r3
 80006d4:	4619      	mov	r1, r3
				UserHandle->Private_GPIO_Reg_Data->AFRH &=
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	400a      	ands	r2, r1
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
				UserHandle->Private_GPIO_Reg_Data->AFRH |=
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
						(UserHandle->Private_GPIO_User_Data->GPIO_PinAltFunMode
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	795b      	ldrb	r3, [r3, #5]
 80006ea:	4619      	mov	r1, r3
										* (UserHandle->Private_GPIO_User_Data->GPIO_PinNumber)));
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	009b      	lsls	r3, r3, #2
								<< (4
 80006f4:	fa01 f303 	lsl.w	r3, r1, r3
 80006f8:	4619      	mov	r1, r3
				UserHandle->Private_GPIO_Reg_Data->AFRH |=
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	430a      	orrs	r2, r1
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop

0800070c <GPIO_ToggleOutputPin>:
		UserHandle.Private_GPIO_Reg_Data->ODR &= ~(0xFFFF);
	}
}

void GPIO_ToggleOutputPin(GPIO_Config_UserHandle_t* UserHandle)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	UserHandle->Private_GPIO_Reg_Data->ODR ^= (1 << UserHandle->GPIO_PIN_NUM);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	695a      	ldr	r2, [r3, #20]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	7a5b      	ldrb	r3, [r3, #9]
 800071e:	4619      	mov	r1, r3
 8000720:	2301      	movs	r3, #1
 8000722:	408b      	lsls	r3, r1
 8000724:	4619      	mov	r1, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	404a      	eors	r2, r1
 800072c:	615a      	str	r2, [r3, #20]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <userdelay>:
#include <stdio.h>

#include "STM32F407xx_GPIO_Driver_Definitions_Public.h"

void userdelay(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
	for(uint32_t d = 0; d<500000; d++);
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	e002      	b.n	800074a <userdelay+0x12>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3301      	adds	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <userdelay+0x28>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d9f8      	bls.n	8000744 <userdelay+0xc>
}
 8000752:	bf00      	nop
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	0007a11f 	.word	0x0007a11f

08000764 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
    /* Loop forever */

	static GPIO_Config_UserHandle_t UserHandle;

	UserHandle.GPIO_PORT = PORT_GPIOD;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <main+0x40>)
 800076a:	2203      	movs	r2, #3
 800076c:	721a      	strb	r2, [r3, #8]
	UserHandle.GPIO_PIN_MODE = GPIO_MODE_OUT;
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <main+0x40>)
 8000770:	2201      	movs	r2, #1
 8000772:	729a      	strb	r2, [r3, #10]
	UserHandle.GPIO_PIN_NUM = GPIO_PIN_NO_12;
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <main+0x40>)
 8000776:	220c      	movs	r2, #12
 8000778:	725a      	strb	r2, [r3, #9]
	UserHandle.GPIO_SPEED_TYPE = GPIO_SPEED_FAST;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <main+0x40>)
 800077c:	2202      	movs	r2, #2
 800077e:	735a      	strb	r2, [r3, #13]
	UserHandle.GPIO_OUTPUT_TYPE = GPIO_OP_TYPE_PP;
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <main+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	72da      	strb	r2, [r3, #11]
	UserHandle.GPIO_PUPD_TYPE = GPIO_NO_PUPD;
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <main+0x40>)
 8000788:	2200      	movs	r2, #0
 800078a:	731a      	strb	r2, [r3, #12]

	GPIO_Init(&UserHandle);
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <main+0x40>)
 800078e:	f7ff fe13 	bl	80003b8 <GPIO_Init>
	printf("\n ...main... \n");
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <main+0x44>)
 8000794:	f000 fac4 	bl	8000d20 <puts>

	while(1)
	{
		userdelay();
 8000798:	f7ff ffce 	bl	8000738 <userdelay>
		GPIO_ToggleOutputPin(&UserHandle);
 800079c:	4801      	ldr	r0, [pc, #4]	; (80007a4 <main+0x40>)
 800079e:	f7ff ffb5 	bl	800070c <GPIO_ToggleOutputPin>
		userdelay();
 80007a2:	e7f9      	b.n	8000798 <main+0x34>
 80007a4:	20000078 	.word	0x20000078
 80007a8:	08001300 	.word	0x08001300

080007ac <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <ITM_SendChar+0x44>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <ITM_SendChar+0x44>)
 80007bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007c0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <ITM_SendChar+0x48>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <ITM_SendChar+0x48>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007ce:	bf00      	nop
 80007d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f8      	beq.n	80007d0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	6013      	str	r3, [r2, #0]
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	e000edfc 	.word	0xe000edfc
 80007f4:	e0000e00 	.word	0xe0000e00

080007f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	e00a      	b.n	8000820 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800080a:	f3af 8000 	nop.w
 800080e:	4601      	mov	r1, r0
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	60ba      	str	r2, [r7, #8]
 8000816:	b2ca      	uxtb	r2, r1
 8000818:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3301      	adds	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697a      	ldr	r2, [r7, #20]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	429a      	cmp	r2, r3
 8000826:	dbf0      	blt.n	800080a <_read+0x12>
  }

  return len;
 8000828:	687b      	ldr	r3, [r7, #4]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b086      	sub	sp, #24
 8000836:	af00      	add	r7, sp, #0
 8000838:	60f8      	str	r0, [r7, #12]
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	e009      	b.n	8000858 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	60ba      	str	r2, [r7, #8]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ffad 	bl	80007ac <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	429a      	cmp	r2, r3
 800085e:	dbf1      	blt.n	8000844 <_write+0x12>
  }
  return len;
 8000860:	687b      	ldr	r3, [r7, #4]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <_close>:

int _close(int file)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000890:	605a      	str	r2, [r3, #4]
  return 0;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <_isatty>:

int _isatty(int file)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
	...

080008cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d4:	4a14      	ldr	r2, [pc, #80]	; (8000928 <_sbrk+0x5c>)
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <_sbrk+0x60>)
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <_sbrk+0x64>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <_sbrk+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d207      	bcs.n	800090c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008fc:	f000 fb4e 	bl	8000f9c <__errno>
 8000900:	4603      	mov	r3, r0
 8000902:	220c      	movs	r2, #12
 8000904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	e009      	b.n	8000920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <_sbrk+0x64>)
 800091c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091e:	68fb      	ldr	r3, [r7, #12]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20020000 	.word	0x20020000
 800092c:	00000400 	.word	0x00000400
 8000930:	20000088 	.word	0x20000088
 8000934:	200001d8 	.word	0x200001d8

08000938 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800093a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800093c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <LoopForever+0x6>)
  ldr r1, =_edata
 8000942:	490d      	ldr	r1, [pc, #52]	; (8000978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000944:	4a0d      	ldr	r2, [pc, #52]	; (800097c <LoopForever+0xe>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000958:	4c0a      	ldr	r4, [pc, #40]	; (8000984 <LoopForever+0x16>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000966:	f000 fb1f 	bl	8000fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fefb 	bl	8000764 <main>

0800096e <LoopForever>:

LoopForever:
  b LoopForever
 800096e:	e7fe      	b.n	800096e <LoopForever>
  ldr   r0, =_estack
 8000970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800097c:	08001318 	.word	0x08001318
  ldr r2, =_sbss
 8000980:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000984:	200001d8 	.word	0x200001d8

08000988 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC_IRQHandler>
	...

0800098c <malloc>:
 800098c:	4b02      	ldr	r3, [pc, #8]	; (8000998 <malloc+0xc>)
 800098e:	4601      	mov	r1, r0
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	f000 b823 	b.w	80009dc <_malloc_r>
 8000996:	bf00      	nop
 8000998:	20000058 	.word	0x20000058

0800099c <sbrk_aligned>:
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	4e0e      	ldr	r6, [pc, #56]	; (80009d8 <sbrk_aligned+0x3c>)
 80009a0:	460c      	mov	r4, r1
 80009a2:	6831      	ldr	r1, [r6, #0]
 80009a4:	4605      	mov	r5, r0
 80009a6:	b911      	cbnz	r1, 80009ae <sbrk_aligned+0x12>
 80009a8:	f000 fad6 	bl	8000f58 <_sbrk_r>
 80009ac:	6030      	str	r0, [r6, #0]
 80009ae:	4621      	mov	r1, r4
 80009b0:	4628      	mov	r0, r5
 80009b2:	f000 fad1 	bl	8000f58 <_sbrk_r>
 80009b6:	1c43      	adds	r3, r0, #1
 80009b8:	d00a      	beq.n	80009d0 <sbrk_aligned+0x34>
 80009ba:	1cc4      	adds	r4, r0, #3
 80009bc:	f024 0403 	bic.w	r4, r4, #3
 80009c0:	42a0      	cmp	r0, r4
 80009c2:	d007      	beq.n	80009d4 <sbrk_aligned+0x38>
 80009c4:	1a21      	subs	r1, r4, r0
 80009c6:	4628      	mov	r0, r5
 80009c8:	f000 fac6 	bl	8000f58 <_sbrk_r>
 80009cc:	3001      	adds	r0, #1
 80009ce:	d101      	bne.n	80009d4 <sbrk_aligned+0x38>
 80009d0:	f04f 34ff 	mov.w	r4, #4294967295
 80009d4:	4620      	mov	r0, r4
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	20000090 	.word	0x20000090

080009dc <_malloc_r>:
 80009dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009e0:	1ccd      	adds	r5, r1, #3
 80009e2:	f025 0503 	bic.w	r5, r5, #3
 80009e6:	3508      	adds	r5, #8
 80009e8:	2d0c      	cmp	r5, #12
 80009ea:	bf38      	it	cc
 80009ec:	250c      	movcc	r5, #12
 80009ee:	2d00      	cmp	r5, #0
 80009f0:	4607      	mov	r7, r0
 80009f2:	db01      	blt.n	80009f8 <_malloc_r+0x1c>
 80009f4:	42a9      	cmp	r1, r5
 80009f6:	d905      	bls.n	8000a04 <_malloc_r+0x28>
 80009f8:	230c      	movs	r3, #12
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	2600      	movs	r6, #0
 80009fe:	4630      	mov	r0, r6
 8000a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ad8 <_malloc_r+0xfc>
 8000a08:	f000 f868 	bl	8000adc <__malloc_lock>
 8000a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8000a10:	461c      	mov	r4, r3
 8000a12:	bb5c      	cbnz	r4, 8000a6c <_malloc_r+0x90>
 8000a14:	4629      	mov	r1, r5
 8000a16:	4638      	mov	r0, r7
 8000a18:	f7ff ffc0 	bl	800099c <sbrk_aligned>
 8000a1c:	1c43      	adds	r3, r0, #1
 8000a1e:	4604      	mov	r4, r0
 8000a20:	d155      	bne.n	8000ace <_malloc_r+0xf2>
 8000a22:	f8d8 4000 	ldr.w	r4, [r8]
 8000a26:	4626      	mov	r6, r4
 8000a28:	2e00      	cmp	r6, #0
 8000a2a:	d145      	bne.n	8000ab8 <_malloc_r+0xdc>
 8000a2c:	2c00      	cmp	r4, #0
 8000a2e:	d048      	beq.n	8000ac2 <_malloc_r+0xe6>
 8000a30:	6823      	ldr	r3, [r4, #0]
 8000a32:	4631      	mov	r1, r6
 8000a34:	4638      	mov	r0, r7
 8000a36:	eb04 0903 	add.w	r9, r4, r3
 8000a3a:	f000 fa8d 	bl	8000f58 <_sbrk_r>
 8000a3e:	4581      	cmp	r9, r0
 8000a40:	d13f      	bne.n	8000ac2 <_malloc_r+0xe6>
 8000a42:	6821      	ldr	r1, [r4, #0]
 8000a44:	1a6d      	subs	r5, r5, r1
 8000a46:	4629      	mov	r1, r5
 8000a48:	4638      	mov	r0, r7
 8000a4a:	f7ff ffa7 	bl	800099c <sbrk_aligned>
 8000a4e:	3001      	adds	r0, #1
 8000a50:	d037      	beq.n	8000ac2 <_malloc_r+0xe6>
 8000a52:	6823      	ldr	r3, [r4, #0]
 8000a54:	442b      	add	r3, r5
 8000a56:	6023      	str	r3, [r4, #0]
 8000a58:	f8d8 3000 	ldr.w	r3, [r8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d038      	beq.n	8000ad2 <_malloc_r+0xf6>
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	42a2      	cmp	r2, r4
 8000a64:	d12b      	bne.n	8000abe <_malloc_r+0xe2>
 8000a66:	2200      	movs	r2, #0
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	e00f      	b.n	8000a8c <_malloc_r+0xb0>
 8000a6c:	6822      	ldr	r2, [r4, #0]
 8000a6e:	1b52      	subs	r2, r2, r5
 8000a70:	d41f      	bmi.n	8000ab2 <_malloc_r+0xd6>
 8000a72:	2a0b      	cmp	r2, #11
 8000a74:	d917      	bls.n	8000aa6 <_malloc_r+0xca>
 8000a76:	1961      	adds	r1, r4, r5
 8000a78:	42a3      	cmp	r3, r4
 8000a7a:	6025      	str	r5, [r4, #0]
 8000a7c:	bf18      	it	ne
 8000a7e:	6059      	strne	r1, [r3, #4]
 8000a80:	6863      	ldr	r3, [r4, #4]
 8000a82:	bf08      	it	eq
 8000a84:	f8c8 1000 	streq.w	r1, [r8]
 8000a88:	5162      	str	r2, [r4, r5]
 8000a8a:	604b      	str	r3, [r1, #4]
 8000a8c:	4638      	mov	r0, r7
 8000a8e:	f104 060b 	add.w	r6, r4, #11
 8000a92:	f000 f829 	bl	8000ae8 <__malloc_unlock>
 8000a96:	f026 0607 	bic.w	r6, r6, #7
 8000a9a:	1d23      	adds	r3, r4, #4
 8000a9c:	1af2      	subs	r2, r6, r3
 8000a9e:	d0ae      	beq.n	80009fe <_malloc_r+0x22>
 8000aa0:	1b9b      	subs	r3, r3, r6
 8000aa2:	50a3      	str	r3, [r4, r2]
 8000aa4:	e7ab      	b.n	80009fe <_malloc_r+0x22>
 8000aa6:	42a3      	cmp	r3, r4
 8000aa8:	6862      	ldr	r2, [r4, #4]
 8000aaa:	d1dd      	bne.n	8000a68 <_malloc_r+0x8c>
 8000aac:	f8c8 2000 	str.w	r2, [r8]
 8000ab0:	e7ec      	b.n	8000a8c <_malloc_r+0xb0>
 8000ab2:	4623      	mov	r3, r4
 8000ab4:	6864      	ldr	r4, [r4, #4]
 8000ab6:	e7ac      	b.n	8000a12 <_malloc_r+0x36>
 8000ab8:	4634      	mov	r4, r6
 8000aba:	6876      	ldr	r6, [r6, #4]
 8000abc:	e7b4      	b.n	8000a28 <_malloc_r+0x4c>
 8000abe:	4613      	mov	r3, r2
 8000ac0:	e7cc      	b.n	8000a5c <_malloc_r+0x80>
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4638      	mov	r0, r7
 8000ac8:	f000 f80e 	bl	8000ae8 <__malloc_unlock>
 8000acc:	e797      	b.n	80009fe <_malloc_r+0x22>
 8000ace:	6025      	str	r5, [r4, #0]
 8000ad0:	e7dc      	b.n	8000a8c <_malloc_r+0xb0>
 8000ad2:	605b      	str	r3, [r3, #4]
 8000ad4:	deff      	udf	#255	; 0xff
 8000ad6:	bf00      	nop
 8000ad8:	2000008c 	.word	0x2000008c

08000adc <__malloc_lock>:
 8000adc:	4801      	ldr	r0, [pc, #4]	; (8000ae4 <__malloc_lock+0x8>)
 8000ade:	f000 ba88 	b.w	8000ff2 <__retarget_lock_acquire_recursive>
 8000ae2:	bf00      	nop
 8000ae4:	200001d4 	.word	0x200001d4

08000ae8 <__malloc_unlock>:
 8000ae8:	4801      	ldr	r0, [pc, #4]	; (8000af0 <__malloc_unlock+0x8>)
 8000aea:	f000 ba83 	b.w	8000ff4 <__retarget_lock_release_recursive>
 8000aee:	bf00      	nop
 8000af0:	200001d4 	.word	0x200001d4

08000af4 <std>:
 8000af4:	2300      	movs	r3, #0
 8000af6:	b510      	push	{r4, lr}
 8000af8:	4604      	mov	r4, r0
 8000afa:	e9c0 3300 	strd	r3, r3, [r0]
 8000afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b02:	6083      	str	r3, [r0, #8]
 8000b04:	8181      	strh	r1, [r0, #12]
 8000b06:	6643      	str	r3, [r0, #100]	; 0x64
 8000b08:	81c2      	strh	r2, [r0, #14]
 8000b0a:	6183      	str	r3, [r0, #24]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	2208      	movs	r2, #8
 8000b10:	305c      	adds	r0, #92	; 0x5c
 8000b12:	f000 f9e5 	bl	8000ee0 <memset>
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <std+0x58>)
 8000b18:	6263      	str	r3, [r4, #36]	; 0x24
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <std+0x5c>)
 8000b1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <std+0x60>)
 8000b20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <std+0x64>)
 8000b24:	6323      	str	r3, [r4, #48]	; 0x30
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <std+0x68>)
 8000b28:	6224      	str	r4, [r4, #32]
 8000b2a:	429c      	cmp	r4, r3
 8000b2c:	d006      	beq.n	8000b3c <std+0x48>
 8000b2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000b32:	4294      	cmp	r4, r2
 8000b34:	d002      	beq.n	8000b3c <std+0x48>
 8000b36:	33d0      	adds	r3, #208	; 0xd0
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	d105      	bne.n	8000b48 <std+0x54>
 8000b3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b44:	f000 ba54 	b.w	8000ff0 <__retarget_lock_init_recursive>
 8000b48:	bd10      	pop	{r4, pc}
 8000b4a:	bf00      	nop
 8000b4c:	08000d31 	.word	0x08000d31
 8000b50:	08000d53 	.word	0x08000d53
 8000b54:	08000d8b 	.word	0x08000d8b
 8000b58:	08000daf 	.word	0x08000daf
 8000b5c:	20000094 	.word	0x20000094

08000b60 <stdio_exit_handler>:
 8000b60:	4a02      	ldr	r2, [pc, #8]	; (8000b6c <stdio_exit_handler+0xc>)
 8000b62:	4903      	ldr	r1, [pc, #12]	; (8000b70 <stdio_exit_handler+0x10>)
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <stdio_exit_handler+0x14>)
 8000b66:	f000 b869 	b.w	8000c3c <_fwalk_sglue>
 8000b6a:	bf00      	nop
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	08001191 	.word	0x08001191
 8000b74:	2000000c 	.word	0x2000000c

08000b78 <cleanup_stdio>:
 8000b78:	6841      	ldr	r1, [r0, #4]
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <cleanup_stdio+0x34>)
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	b510      	push	{r4, lr}
 8000b80:	4604      	mov	r4, r0
 8000b82:	d001      	beq.n	8000b88 <cleanup_stdio+0x10>
 8000b84:	f000 fb04 	bl	8001190 <_fflush_r>
 8000b88:	68a1      	ldr	r1, [r4, #8]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <cleanup_stdio+0x38>)
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d002      	beq.n	8000b96 <cleanup_stdio+0x1e>
 8000b90:	4620      	mov	r0, r4
 8000b92:	f000 fafd 	bl	8001190 <_fflush_r>
 8000b96:	68e1      	ldr	r1, [r4, #12]
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <cleanup_stdio+0x3c>)
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	d004      	beq.n	8000ba8 <cleanup_stdio+0x30>
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ba4:	f000 baf4 	b.w	8001190 <_fflush_r>
 8000ba8:	bd10      	pop	{r4, pc}
 8000baa:	bf00      	nop
 8000bac:	20000094 	.word	0x20000094
 8000bb0:	200000fc 	.word	0x200000fc
 8000bb4:	20000164 	.word	0x20000164

08000bb8 <global_stdio_init.part.0>:
 8000bb8:	b510      	push	{r4, lr}
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <global_stdio_init.part.0+0x30>)
 8000bbc:	4c0b      	ldr	r4, [pc, #44]	; (8000bec <global_stdio_init.part.0+0x34>)
 8000bbe:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <global_stdio_init.part.0+0x38>)
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	f7ff ff94 	bl	8000af4 <std>
 8000bcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2109      	movs	r1, #9
 8000bd4:	f7ff ff8e 	bl	8000af4 <std>
 8000bd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000bdc:	2202      	movs	r2, #2
 8000bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000be2:	2112      	movs	r1, #18
 8000be4:	f7ff bf86 	b.w	8000af4 <std>
 8000be8:	200001cc 	.word	0x200001cc
 8000bec:	20000094 	.word	0x20000094
 8000bf0:	08000b61 	.word	0x08000b61

08000bf4 <__sfp_lock_acquire>:
 8000bf4:	4801      	ldr	r0, [pc, #4]	; (8000bfc <__sfp_lock_acquire+0x8>)
 8000bf6:	f000 b9fc 	b.w	8000ff2 <__retarget_lock_acquire_recursive>
 8000bfa:	bf00      	nop
 8000bfc:	200001d5 	.word	0x200001d5

08000c00 <__sfp_lock_release>:
 8000c00:	4801      	ldr	r0, [pc, #4]	; (8000c08 <__sfp_lock_release+0x8>)
 8000c02:	f000 b9f7 	b.w	8000ff4 <__retarget_lock_release_recursive>
 8000c06:	bf00      	nop
 8000c08:	200001d5 	.word	0x200001d5

08000c0c <__sinit>:
 8000c0c:	b510      	push	{r4, lr}
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f7ff fff0 	bl	8000bf4 <__sfp_lock_acquire>
 8000c14:	6a23      	ldr	r3, [r4, #32]
 8000c16:	b11b      	cbz	r3, 8000c20 <__sinit+0x14>
 8000c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c1c:	f7ff bff0 	b.w	8000c00 <__sfp_lock_release>
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__sinit+0x28>)
 8000c22:	6223      	str	r3, [r4, #32]
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__sinit+0x2c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1f5      	bne.n	8000c18 <__sinit+0xc>
 8000c2c:	f7ff ffc4 	bl	8000bb8 <global_stdio_init.part.0>
 8000c30:	e7f2      	b.n	8000c18 <__sinit+0xc>
 8000c32:	bf00      	nop
 8000c34:	08000b79 	.word	0x08000b79
 8000c38:	200001cc 	.word	0x200001cc

08000c3c <_fwalk_sglue>:
 8000c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c40:	4607      	mov	r7, r0
 8000c42:	4688      	mov	r8, r1
 8000c44:	4614      	mov	r4, r2
 8000c46:	2600      	movs	r6, #0
 8000c48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c4c:	f1b9 0901 	subs.w	r9, r9, #1
 8000c50:	d505      	bpl.n	8000c5e <_fwalk_sglue+0x22>
 8000c52:	6824      	ldr	r4, [r4, #0]
 8000c54:	2c00      	cmp	r4, #0
 8000c56:	d1f7      	bne.n	8000c48 <_fwalk_sglue+0xc>
 8000c58:	4630      	mov	r0, r6
 8000c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c5e:	89ab      	ldrh	r3, [r5, #12]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d907      	bls.n	8000c74 <_fwalk_sglue+0x38>
 8000c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	d003      	beq.n	8000c74 <_fwalk_sglue+0x38>
 8000c6c:	4629      	mov	r1, r5
 8000c6e:	4638      	mov	r0, r7
 8000c70:	47c0      	blx	r8
 8000c72:	4306      	orrs	r6, r0
 8000c74:	3568      	adds	r5, #104	; 0x68
 8000c76:	e7e9      	b.n	8000c4c <_fwalk_sglue+0x10>

08000c78 <_puts_r>:
 8000c78:	6a03      	ldr	r3, [r0, #32]
 8000c7a:	b570      	push	{r4, r5, r6, lr}
 8000c7c:	6884      	ldr	r4, [r0, #8]
 8000c7e:	4605      	mov	r5, r0
 8000c80:	460e      	mov	r6, r1
 8000c82:	b90b      	cbnz	r3, 8000c88 <_puts_r+0x10>
 8000c84:	f7ff ffc2 	bl	8000c0c <__sinit>
 8000c88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c8a:	07db      	lsls	r3, r3, #31
 8000c8c:	d405      	bmi.n	8000c9a <_puts_r+0x22>
 8000c8e:	89a3      	ldrh	r3, [r4, #12]
 8000c90:	0598      	lsls	r0, r3, #22
 8000c92:	d402      	bmi.n	8000c9a <_puts_r+0x22>
 8000c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c96:	f000 f9ac 	bl	8000ff2 <__retarget_lock_acquire_recursive>
 8000c9a:	89a3      	ldrh	r3, [r4, #12]
 8000c9c:	0719      	lsls	r1, r3, #28
 8000c9e:	d513      	bpl.n	8000cc8 <_puts_r+0x50>
 8000ca0:	6923      	ldr	r3, [r4, #16]
 8000ca2:	b18b      	cbz	r3, 8000cc8 <_puts_r+0x50>
 8000ca4:	3e01      	subs	r6, #1
 8000ca6:	68a3      	ldr	r3, [r4, #8]
 8000ca8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000cac:	3b01      	subs	r3, #1
 8000cae:	60a3      	str	r3, [r4, #8]
 8000cb0:	b9e9      	cbnz	r1, 8000cee <_puts_r+0x76>
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	da2e      	bge.n	8000d14 <_puts_r+0x9c>
 8000cb6:	4622      	mov	r2, r4
 8000cb8:	210a      	movs	r1, #10
 8000cba:	4628      	mov	r0, r5
 8000cbc:	f000 f87b 	bl	8000db6 <__swbuf_r>
 8000cc0:	3001      	adds	r0, #1
 8000cc2:	d007      	beq.n	8000cd4 <_puts_r+0x5c>
 8000cc4:	250a      	movs	r5, #10
 8000cc6:	e007      	b.n	8000cd8 <_puts_r+0x60>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	4628      	mov	r0, r5
 8000ccc:	f000 f8b0 	bl	8000e30 <__swsetup_r>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d0e7      	beq.n	8000ca4 <_puts_r+0x2c>
 8000cd4:	f04f 35ff 	mov.w	r5, #4294967295
 8000cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cda:	07da      	lsls	r2, r3, #31
 8000cdc:	d405      	bmi.n	8000cea <_puts_r+0x72>
 8000cde:	89a3      	ldrh	r3, [r4, #12]
 8000ce0:	059b      	lsls	r3, r3, #22
 8000ce2:	d402      	bmi.n	8000cea <_puts_r+0x72>
 8000ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ce6:	f000 f985 	bl	8000ff4 <__retarget_lock_release_recursive>
 8000cea:	4628      	mov	r0, r5
 8000cec:	bd70      	pop	{r4, r5, r6, pc}
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	da04      	bge.n	8000cfc <_puts_r+0x84>
 8000cf2:	69a2      	ldr	r2, [r4, #24]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dc06      	bgt.n	8000d06 <_puts_r+0x8e>
 8000cf8:	290a      	cmp	r1, #10
 8000cfa:	d004      	beq.n	8000d06 <_puts_r+0x8e>
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	6022      	str	r2, [r4, #0]
 8000d02:	7019      	strb	r1, [r3, #0]
 8000d04:	e7cf      	b.n	8000ca6 <_puts_r+0x2e>
 8000d06:	4622      	mov	r2, r4
 8000d08:	4628      	mov	r0, r5
 8000d0a:	f000 f854 	bl	8000db6 <__swbuf_r>
 8000d0e:	3001      	adds	r0, #1
 8000d10:	d1c9      	bne.n	8000ca6 <_puts_r+0x2e>
 8000d12:	e7df      	b.n	8000cd4 <_puts_r+0x5c>
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	250a      	movs	r5, #10
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	6022      	str	r2, [r4, #0]
 8000d1c:	701d      	strb	r5, [r3, #0]
 8000d1e:	e7db      	b.n	8000cd8 <_puts_r+0x60>

08000d20 <puts>:
 8000d20:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <puts+0xc>)
 8000d22:	4601      	mov	r1, r0
 8000d24:	6818      	ldr	r0, [r3, #0]
 8000d26:	f7ff bfa7 	b.w	8000c78 <_puts_r>
 8000d2a:	bf00      	nop
 8000d2c:	20000058 	.word	0x20000058

08000d30 <__sread>:
 8000d30:	b510      	push	{r4, lr}
 8000d32:	460c      	mov	r4, r1
 8000d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d38:	f000 f8fc 	bl	8000f34 <_read_r>
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	bfab      	itete	ge
 8000d40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000d42:	89a3      	ldrhlt	r3, [r4, #12]
 8000d44:	181b      	addge	r3, r3, r0
 8000d46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d4a:	bfac      	ite	ge
 8000d4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d4e:	81a3      	strhlt	r3, [r4, #12]
 8000d50:	bd10      	pop	{r4, pc}

08000d52 <__swrite>:
 8000d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d56:	461f      	mov	r7, r3
 8000d58:	898b      	ldrh	r3, [r1, #12]
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	4605      	mov	r5, r0
 8000d5e:	460c      	mov	r4, r1
 8000d60:	4616      	mov	r6, r2
 8000d62:	d505      	bpl.n	8000d70 <__swrite+0x1e>
 8000d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d68:	2302      	movs	r3, #2
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f000 f8d0 	bl	8000f10 <_lseek_r>
 8000d70:	89a3      	ldrh	r3, [r4, #12]
 8000d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d7a:	81a3      	strh	r3, [r4, #12]
 8000d7c:	4632      	mov	r2, r6
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4628      	mov	r0, r5
 8000d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d86:	f000 b8f7 	b.w	8000f78 <_write_r>

08000d8a <__sseek>:
 8000d8a:	b510      	push	{r4, lr}
 8000d8c:	460c      	mov	r4, r1
 8000d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d92:	f000 f8bd 	bl	8000f10 <_lseek_r>
 8000d96:	1c43      	adds	r3, r0, #1
 8000d98:	89a3      	ldrh	r3, [r4, #12]
 8000d9a:	bf15      	itete	ne
 8000d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000da6:	81a3      	strheq	r3, [r4, #12]
 8000da8:	bf18      	it	ne
 8000daa:	81a3      	strhne	r3, [r4, #12]
 8000dac:	bd10      	pop	{r4, pc}

08000dae <__sclose>:
 8000dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000db2:	f000 b89d 	b.w	8000ef0 <_close_r>

08000db6 <__swbuf_r>:
 8000db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db8:	460e      	mov	r6, r1
 8000dba:	4614      	mov	r4, r2
 8000dbc:	4605      	mov	r5, r0
 8000dbe:	b118      	cbz	r0, 8000dc8 <__swbuf_r+0x12>
 8000dc0:	6a03      	ldr	r3, [r0, #32]
 8000dc2:	b90b      	cbnz	r3, 8000dc8 <__swbuf_r+0x12>
 8000dc4:	f7ff ff22 	bl	8000c0c <__sinit>
 8000dc8:	69a3      	ldr	r3, [r4, #24]
 8000dca:	60a3      	str	r3, [r4, #8]
 8000dcc:	89a3      	ldrh	r3, [r4, #12]
 8000dce:	071a      	lsls	r2, r3, #28
 8000dd0:	d525      	bpl.n	8000e1e <__swbuf_r+0x68>
 8000dd2:	6923      	ldr	r3, [r4, #16]
 8000dd4:	b31b      	cbz	r3, 8000e1e <__swbuf_r+0x68>
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	6922      	ldr	r2, [r4, #16]
 8000dda:	1a98      	subs	r0, r3, r2
 8000ddc:	6963      	ldr	r3, [r4, #20]
 8000dde:	b2f6      	uxtb	r6, r6
 8000de0:	4283      	cmp	r3, r0
 8000de2:	4637      	mov	r7, r6
 8000de4:	dc04      	bgt.n	8000df0 <__swbuf_r+0x3a>
 8000de6:	4621      	mov	r1, r4
 8000de8:	4628      	mov	r0, r5
 8000dea:	f000 f9d1 	bl	8001190 <_fflush_r>
 8000dee:	b9e0      	cbnz	r0, 8000e2a <__swbuf_r+0x74>
 8000df0:	68a3      	ldr	r3, [r4, #8]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	60a3      	str	r3, [r4, #8]
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	6022      	str	r2, [r4, #0]
 8000dfc:	701e      	strb	r6, [r3, #0]
 8000dfe:	6962      	ldr	r2, [r4, #20]
 8000e00:	1c43      	adds	r3, r0, #1
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d004      	beq.n	8000e10 <__swbuf_r+0x5a>
 8000e06:	89a3      	ldrh	r3, [r4, #12]
 8000e08:	07db      	lsls	r3, r3, #31
 8000e0a:	d506      	bpl.n	8000e1a <__swbuf_r+0x64>
 8000e0c:	2e0a      	cmp	r6, #10
 8000e0e:	d104      	bne.n	8000e1a <__swbuf_r+0x64>
 8000e10:	4621      	mov	r1, r4
 8000e12:	4628      	mov	r0, r5
 8000e14:	f000 f9bc 	bl	8001190 <_fflush_r>
 8000e18:	b938      	cbnz	r0, 8000e2a <__swbuf_r+0x74>
 8000e1a:	4638      	mov	r0, r7
 8000e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e1e:	4621      	mov	r1, r4
 8000e20:	4628      	mov	r0, r5
 8000e22:	f000 f805 	bl	8000e30 <__swsetup_r>
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d0d5      	beq.n	8000dd6 <__swbuf_r+0x20>
 8000e2a:	f04f 37ff 	mov.w	r7, #4294967295
 8000e2e:	e7f4      	b.n	8000e1a <__swbuf_r+0x64>

08000e30 <__swsetup_r>:
 8000e30:	b538      	push	{r3, r4, r5, lr}
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <__swsetup_r+0xac>)
 8000e34:	4605      	mov	r5, r0
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	460c      	mov	r4, r1
 8000e3a:	b118      	cbz	r0, 8000e44 <__swsetup_r+0x14>
 8000e3c:	6a03      	ldr	r3, [r0, #32]
 8000e3e:	b90b      	cbnz	r3, 8000e44 <__swsetup_r+0x14>
 8000e40:	f7ff fee4 	bl	8000c0c <__sinit>
 8000e44:	89a3      	ldrh	r3, [r4, #12]
 8000e46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e4a:	0718      	lsls	r0, r3, #28
 8000e4c:	d422      	bmi.n	8000e94 <__swsetup_r+0x64>
 8000e4e:	06d9      	lsls	r1, r3, #27
 8000e50:	d407      	bmi.n	8000e62 <__swsetup_r+0x32>
 8000e52:	2309      	movs	r3, #9
 8000e54:	602b      	str	r3, [r5, #0]
 8000e56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000e5a:	81a3      	strh	r3, [r4, #12]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	e034      	b.n	8000ecc <__swsetup_r+0x9c>
 8000e62:	0758      	lsls	r0, r3, #29
 8000e64:	d512      	bpl.n	8000e8c <__swsetup_r+0x5c>
 8000e66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e68:	b141      	cbz	r1, 8000e7c <__swsetup_r+0x4c>
 8000e6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d002      	beq.n	8000e78 <__swsetup_r+0x48>
 8000e72:	4628      	mov	r0, r5
 8000e74:	f000 f8c0 	bl	8000ff8 <_free_r>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	6363      	str	r3, [r4, #52]	; 0x34
 8000e7c:	89a3      	ldrh	r3, [r4, #12]
 8000e7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000e82:	81a3      	strh	r3, [r4, #12]
 8000e84:	2300      	movs	r3, #0
 8000e86:	6063      	str	r3, [r4, #4]
 8000e88:	6923      	ldr	r3, [r4, #16]
 8000e8a:	6023      	str	r3, [r4, #0]
 8000e8c:	89a3      	ldrh	r3, [r4, #12]
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	81a3      	strh	r3, [r4, #12]
 8000e94:	6923      	ldr	r3, [r4, #16]
 8000e96:	b94b      	cbnz	r3, 8000eac <__swsetup_r+0x7c>
 8000e98:	89a3      	ldrh	r3, [r4, #12]
 8000e9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ea2:	d003      	beq.n	8000eac <__swsetup_r+0x7c>
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	4628      	mov	r0, r5
 8000ea8:	f000 f9c0 	bl	800122c <__smakebuf_r>
 8000eac:	89a0      	ldrh	r0, [r4, #12]
 8000eae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000eb2:	f010 0301 	ands.w	r3, r0, #1
 8000eb6:	d00a      	beq.n	8000ece <__swsetup_r+0x9e>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60a3      	str	r3, [r4, #8]
 8000ebc:	6963      	ldr	r3, [r4, #20]
 8000ebe:	425b      	negs	r3, r3
 8000ec0:	61a3      	str	r3, [r4, #24]
 8000ec2:	6923      	ldr	r3, [r4, #16]
 8000ec4:	b943      	cbnz	r3, 8000ed8 <__swsetup_r+0xa8>
 8000ec6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000eca:	d1c4      	bne.n	8000e56 <__swsetup_r+0x26>
 8000ecc:	bd38      	pop	{r3, r4, r5, pc}
 8000ece:	0781      	lsls	r1, r0, #30
 8000ed0:	bf58      	it	pl
 8000ed2:	6963      	ldrpl	r3, [r4, #20]
 8000ed4:	60a3      	str	r3, [r4, #8]
 8000ed6:	e7f4      	b.n	8000ec2 <__swsetup_r+0x92>
 8000ed8:	2000      	movs	r0, #0
 8000eda:	e7f7      	b.n	8000ecc <__swsetup_r+0x9c>
 8000edc:	20000058 	.word	0x20000058

08000ee0 <memset>:
 8000ee0:	4402      	add	r2, r0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d100      	bne.n	8000eea <memset+0xa>
 8000ee8:	4770      	bx	lr
 8000eea:	f803 1b01 	strb.w	r1, [r3], #1
 8000eee:	e7f9      	b.n	8000ee4 <memset+0x4>

08000ef0 <_close_r>:
 8000ef0:	b538      	push	{r3, r4, r5, lr}
 8000ef2:	4d06      	ldr	r5, [pc, #24]	; (8000f0c <_close_r+0x1c>)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	4608      	mov	r0, r1
 8000efa:	602b      	str	r3, [r5, #0]
 8000efc:	f7ff fcb5 	bl	800086a <_close>
 8000f00:	1c43      	adds	r3, r0, #1
 8000f02:	d102      	bne.n	8000f0a <_close_r+0x1a>
 8000f04:	682b      	ldr	r3, [r5, #0]
 8000f06:	b103      	cbz	r3, 8000f0a <_close_r+0x1a>
 8000f08:	6023      	str	r3, [r4, #0]
 8000f0a:	bd38      	pop	{r3, r4, r5, pc}
 8000f0c:	200001d0 	.word	0x200001d0

08000f10 <_lseek_r>:
 8000f10:	b538      	push	{r3, r4, r5, lr}
 8000f12:	4d07      	ldr	r5, [pc, #28]	; (8000f30 <_lseek_r+0x20>)
 8000f14:	4604      	mov	r4, r0
 8000f16:	4608      	mov	r0, r1
 8000f18:	4611      	mov	r1, r2
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	602a      	str	r2, [r5, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	f7ff fcc7 	bl	80008b2 <_lseek>
 8000f24:	1c43      	adds	r3, r0, #1
 8000f26:	d102      	bne.n	8000f2e <_lseek_r+0x1e>
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	b103      	cbz	r3, 8000f2e <_lseek_r+0x1e>
 8000f2c:	6023      	str	r3, [r4, #0]
 8000f2e:	bd38      	pop	{r3, r4, r5, pc}
 8000f30:	200001d0 	.word	0x200001d0

08000f34 <_read_r>:
 8000f34:	b538      	push	{r3, r4, r5, lr}
 8000f36:	4d07      	ldr	r5, [pc, #28]	; (8000f54 <_read_r+0x20>)
 8000f38:	4604      	mov	r4, r0
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	2200      	movs	r2, #0
 8000f40:	602a      	str	r2, [r5, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	f7ff fc58 	bl	80007f8 <_read>
 8000f48:	1c43      	adds	r3, r0, #1
 8000f4a:	d102      	bne.n	8000f52 <_read_r+0x1e>
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	b103      	cbz	r3, 8000f52 <_read_r+0x1e>
 8000f50:	6023      	str	r3, [r4, #0]
 8000f52:	bd38      	pop	{r3, r4, r5, pc}
 8000f54:	200001d0 	.word	0x200001d0

08000f58 <_sbrk_r>:
 8000f58:	b538      	push	{r3, r4, r5, lr}
 8000f5a:	4d06      	ldr	r5, [pc, #24]	; (8000f74 <_sbrk_r+0x1c>)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	4604      	mov	r4, r0
 8000f60:	4608      	mov	r0, r1
 8000f62:	602b      	str	r3, [r5, #0]
 8000f64:	f7ff fcb2 	bl	80008cc <_sbrk>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	d102      	bne.n	8000f72 <_sbrk_r+0x1a>
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	b103      	cbz	r3, 8000f72 <_sbrk_r+0x1a>
 8000f70:	6023      	str	r3, [r4, #0]
 8000f72:	bd38      	pop	{r3, r4, r5, pc}
 8000f74:	200001d0 	.word	0x200001d0

08000f78 <_write_r>:
 8000f78:	b538      	push	{r3, r4, r5, lr}
 8000f7a:	4d07      	ldr	r5, [pc, #28]	; (8000f98 <_write_r+0x20>)
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	4608      	mov	r0, r1
 8000f80:	4611      	mov	r1, r2
 8000f82:	2200      	movs	r2, #0
 8000f84:	602a      	str	r2, [r5, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	f7ff fc53 	bl	8000832 <_write>
 8000f8c:	1c43      	adds	r3, r0, #1
 8000f8e:	d102      	bne.n	8000f96 <_write_r+0x1e>
 8000f90:	682b      	ldr	r3, [r5, #0]
 8000f92:	b103      	cbz	r3, 8000f96 <_write_r+0x1e>
 8000f94:	6023      	str	r3, [r4, #0]
 8000f96:	bd38      	pop	{r3, r4, r5, pc}
 8000f98:	200001d0 	.word	0x200001d0

08000f9c <__errno>:
 8000f9c:	4b01      	ldr	r3, [pc, #4]	; (8000fa4 <__errno+0x8>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000058 	.word	0x20000058

08000fa8 <__libc_init_array>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	4d0d      	ldr	r5, [pc, #52]	; (8000fe0 <__libc_init_array+0x38>)
 8000fac:	4c0d      	ldr	r4, [pc, #52]	; (8000fe4 <__libc_init_array+0x3c>)
 8000fae:	1b64      	subs	r4, r4, r5
 8000fb0:	10a4      	asrs	r4, r4, #2
 8000fb2:	2600      	movs	r6, #0
 8000fb4:	42a6      	cmp	r6, r4
 8000fb6:	d109      	bne.n	8000fcc <__libc_init_array+0x24>
 8000fb8:	4d0b      	ldr	r5, [pc, #44]	; (8000fe8 <__libc_init_array+0x40>)
 8000fba:	4c0c      	ldr	r4, [pc, #48]	; (8000fec <__libc_init_array+0x44>)
 8000fbc:	f000 f994 	bl	80012e8 <_init>
 8000fc0:	1b64      	subs	r4, r4, r5
 8000fc2:	10a4      	asrs	r4, r4, #2
 8000fc4:	2600      	movs	r6, #0
 8000fc6:	42a6      	cmp	r6, r4
 8000fc8:	d105      	bne.n	8000fd6 <__libc_init_array+0x2e>
 8000fca:	bd70      	pop	{r4, r5, r6, pc}
 8000fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fd0:	4798      	blx	r3
 8000fd2:	3601      	adds	r6, #1
 8000fd4:	e7ee      	b.n	8000fb4 <__libc_init_array+0xc>
 8000fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fda:	4798      	blx	r3
 8000fdc:	3601      	adds	r6, #1
 8000fde:	e7f2      	b.n	8000fc6 <__libc_init_array+0x1e>
 8000fe0:	08001310 	.word	0x08001310
 8000fe4:	08001310 	.word	0x08001310
 8000fe8:	08001310 	.word	0x08001310
 8000fec:	08001314 	.word	0x08001314

08000ff0 <__retarget_lock_init_recursive>:
 8000ff0:	4770      	bx	lr

08000ff2 <__retarget_lock_acquire_recursive>:
 8000ff2:	4770      	bx	lr

08000ff4 <__retarget_lock_release_recursive>:
 8000ff4:	4770      	bx	lr
	...

08000ff8 <_free_r>:
 8000ff8:	b538      	push	{r3, r4, r5, lr}
 8000ffa:	4605      	mov	r5, r0
 8000ffc:	2900      	cmp	r1, #0
 8000ffe:	d041      	beq.n	8001084 <_free_r+0x8c>
 8001000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001004:	1f0c      	subs	r4, r1, #4
 8001006:	2b00      	cmp	r3, #0
 8001008:	bfb8      	it	lt
 800100a:	18e4      	addlt	r4, r4, r3
 800100c:	f7ff fd66 	bl	8000adc <__malloc_lock>
 8001010:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <_free_r+0x90>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	b933      	cbnz	r3, 8001024 <_free_r+0x2c>
 8001016:	6063      	str	r3, [r4, #4]
 8001018:	6014      	str	r4, [r2, #0]
 800101a:	4628      	mov	r0, r5
 800101c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001020:	f7ff bd62 	b.w	8000ae8 <__malloc_unlock>
 8001024:	42a3      	cmp	r3, r4
 8001026:	d908      	bls.n	800103a <_free_r+0x42>
 8001028:	6820      	ldr	r0, [r4, #0]
 800102a:	1821      	adds	r1, r4, r0
 800102c:	428b      	cmp	r3, r1
 800102e:	bf01      	itttt	eq
 8001030:	6819      	ldreq	r1, [r3, #0]
 8001032:	685b      	ldreq	r3, [r3, #4]
 8001034:	1809      	addeq	r1, r1, r0
 8001036:	6021      	streq	r1, [r4, #0]
 8001038:	e7ed      	b.n	8001016 <_free_r+0x1e>
 800103a:	461a      	mov	r2, r3
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	b10b      	cbz	r3, 8001044 <_free_r+0x4c>
 8001040:	42a3      	cmp	r3, r4
 8001042:	d9fa      	bls.n	800103a <_free_r+0x42>
 8001044:	6811      	ldr	r1, [r2, #0]
 8001046:	1850      	adds	r0, r2, r1
 8001048:	42a0      	cmp	r0, r4
 800104a:	d10b      	bne.n	8001064 <_free_r+0x6c>
 800104c:	6820      	ldr	r0, [r4, #0]
 800104e:	4401      	add	r1, r0
 8001050:	1850      	adds	r0, r2, r1
 8001052:	4283      	cmp	r3, r0
 8001054:	6011      	str	r1, [r2, #0]
 8001056:	d1e0      	bne.n	800101a <_free_r+0x22>
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	6053      	str	r3, [r2, #4]
 800105e:	4408      	add	r0, r1
 8001060:	6010      	str	r0, [r2, #0]
 8001062:	e7da      	b.n	800101a <_free_r+0x22>
 8001064:	d902      	bls.n	800106c <_free_r+0x74>
 8001066:	230c      	movs	r3, #12
 8001068:	602b      	str	r3, [r5, #0]
 800106a:	e7d6      	b.n	800101a <_free_r+0x22>
 800106c:	6820      	ldr	r0, [r4, #0]
 800106e:	1821      	adds	r1, r4, r0
 8001070:	428b      	cmp	r3, r1
 8001072:	bf04      	itt	eq
 8001074:	6819      	ldreq	r1, [r3, #0]
 8001076:	685b      	ldreq	r3, [r3, #4]
 8001078:	6063      	str	r3, [r4, #4]
 800107a:	bf04      	itt	eq
 800107c:	1809      	addeq	r1, r1, r0
 800107e:	6021      	streq	r1, [r4, #0]
 8001080:	6054      	str	r4, [r2, #4]
 8001082:	e7ca      	b.n	800101a <_free_r+0x22>
 8001084:	bd38      	pop	{r3, r4, r5, pc}
 8001086:	bf00      	nop
 8001088:	2000008c 	.word	0x2000008c

0800108c <__sflush_r>:
 800108c:	898a      	ldrh	r2, [r1, #12]
 800108e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001090:	4605      	mov	r5, r0
 8001092:	0710      	lsls	r0, r2, #28
 8001094:	460c      	mov	r4, r1
 8001096:	d457      	bmi.n	8001148 <__sflush_r+0xbc>
 8001098:	684b      	ldr	r3, [r1, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	dc04      	bgt.n	80010a8 <__sflush_r+0x1c>
 800109e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dc01      	bgt.n	80010a8 <__sflush_r+0x1c>
 80010a4:	2000      	movs	r0, #0
 80010a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010aa:	2e00      	cmp	r6, #0
 80010ac:	d0fa      	beq.n	80010a4 <__sflush_r+0x18>
 80010ae:	2300      	movs	r3, #0
 80010b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80010b4:	682f      	ldr	r7, [r5, #0]
 80010b6:	6a21      	ldr	r1, [r4, #32]
 80010b8:	602b      	str	r3, [r5, #0]
 80010ba:	d032      	beq.n	8001122 <__sflush_r+0x96>
 80010bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80010be:	89a3      	ldrh	r3, [r4, #12]
 80010c0:	075a      	lsls	r2, r3, #29
 80010c2:	d505      	bpl.n	80010d0 <__sflush_r+0x44>
 80010c4:	6863      	ldr	r3, [r4, #4]
 80010c6:	1ac0      	subs	r0, r0, r3
 80010c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80010ca:	b10b      	cbz	r3, 80010d0 <__sflush_r+0x44>
 80010cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ce:	1ac0      	subs	r0, r0, r3
 80010d0:	2300      	movs	r3, #0
 80010d2:	4602      	mov	r2, r0
 80010d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010d6:	6a21      	ldr	r1, [r4, #32]
 80010d8:	4628      	mov	r0, r5
 80010da:	47b0      	blx	r6
 80010dc:	1c43      	adds	r3, r0, #1
 80010de:	89a3      	ldrh	r3, [r4, #12]
 80010e0:	d106      	bne.n	80010f0 <__sflush_r+0x64>
 80010e2:	6829      	ldr	r1, [r5, #0]
 80010e4:	291d      	cmp	r1, #29
 80010e6:	d82b      	bhi.n	8001140 <__sflush_r+0xb4>
 80010e8:	4a28      	ldr	r2, [pc, #160]	; (800118c <__sflush_r+0x100>)
 80010ea:	410a      	asrs	r2, r1
 80010ec:	07d6      	lsls	r6, r2, #31
 80010ee:	d427      	bmi.n	8001140 <__sflush_r+0xb4>
 80010f0:	2200      	movs	r2, #0
 80010f2:	6062      	str	r2, [r4, #4]
 80010f4:	04d9      	lsls	r1, r3, #19
 80010f6:	6922      	ldr	r2, [r4, #16]
 80010f8:	6022      	str	r2, [r4, #0]
 80010fa:	d504      	bpl.n	8001106 <__sflush_r+0x7a>
 80010fc:	1c42      	adds	r2, r0, #1
 80010fe:	d101      	bne.n	8001104 <__sflush_r+0x78>
 8001100:	682b      	ldr	r3, [r5, #0]
 8001102:	b903      	cbnz	r3, 8001106 <__sflush_r+0x7a>
 8001104:	6560      	str	r0, [r4, #84]	; 0x54
 8001106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001108:	602f      	str	r7, [r5, #0]
 800110a:	2900      	cmp	r1, #0
 800110c:	d0ca      	beq.n	80010a4 <__sflush_r+0x18>
 800110e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001112:	4299      	cmp	r1, r3
 8001114:	d002      	beq.n	800111c <__sflush_r+0x90>
 8001116:	4628      	mov	r0, r5
 8001118:	f7ff ff6e 	bl	8000ff8 <_free_r>
 800111c:	2000      	movs	r0, #0
 800111e:	6360      	str	r0, [r4, #52]	; 0x34
 8001120:	e7c1      	b.n	80010a6 <__sflush_r+0x1a>
 8001122:	2301      	movs	r3, #1
 8001124:	4628      	mov	r0, r5
 8001126:	47b0      	blx	r6
 8001128:	1c41      	adds	r1, r0, #1
 800112a:	d1c8      	bne.n	80010be <__sflush_r+0x32>
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0c5      	beq.n	80010be <__sflush_r+0x32>
 8001132:	2b1d      	cmp	r3, #29
 8001134:	d001      	beq.n	800113a <__sflush_r+0xae>
 8001136:	2b16      	cmp	r3, #22
 8001138:	d101      	bne.n	800113e <__sflush_r+0xb2>
 800113a:	602f      	str	r7, [r5, #0]
 800113c:	e7b2      	b.n	80010a4 <__sflush_r+0x18>
 800113e:	89a3      	ldrh	r3, [r4, #12]
 8001140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001144:	81a3      	strh	r3, [r4, #12]
 8001146:	e7ae      	b.n	80010a6 <__sflush_r+0x1a>
 8001148:	690f      	ldr	r7, [r1, #16]
 800114a:	2f00      	cmp	r7, #0
 800114c:	d0aa      	beq.n	80010a4 <__sflush_r+0x18>
 800114e:	0793      	lsls	r3, r2, #30
 8001150:	680e      	ldr	r6, [r1, #0]
 8001152:	bf08      	it	eq
 8001154:	694b      	ldreq	r3, [r1, #20]
 8001156:	600f      	str	r7, [r1, #0]
 8001158:	bf18      	it	ne
 800115a:	2300      	movne	r3, #0
 800115c:	1bf6      	subs	r6, r6, r7
 800115e:	608b      	str	r3, [r1, #8]
 8001160:	2e00      	cmp	r6, #0
 8001162:	dd9f      	ble.n	80010a4 <__sflush_r+0x18>
 8001164:	6a21      	ldr	r1, [r4, #32]
 8001166:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800116a:	4633      	mov	r3, r6
 800116c:	463a      	mov	r2, r7
 800116e:	4628      	mov	r0, r5
 8001170:	47e0      	blx	ip
 8001172:	2800      	cmp	r0, #0
 8001174:	dc06      	bgt.n	8001184 <__sflush_r+0xf8>
 8001176:	89a3      	ldrh	r3, [r4, #12]
 8001178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800117c:	81a3      	strh	r3, [r4, #12]
 800117e:	f04f 30ff 	mov.w	r0, #4294967295
 8001182:	e790      	b.n	80010a6 <__sflush_r+0x1a>
 8001184:	4407      	add	r7, r0
 8001186:	1a36      	subs	r6, r6, r0
 8001188:	e7ea      	b.n	8001160 <__sflush_r+0xd4>
 800118a:	bf00      	nop
 800118c:	dfbffffe 	.word	0xdfbffffe

08001190 <_fflush_r>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	690b      	ldr	r3, [r1, #16]
 8001194:	4605      	mov	r5, r0
 8001196:	460c      	mov	r4, r1
 8001198:	b913      	cbnz	r3, 80011a0 <_fflush_r+0x10>
 800119a:	2500      	movs	r5, #0
 800119c:	4628      	mov	r0, r5
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	b118      	cbz	r0, 80011aa <_fflush_r+0x1a>
 80011a2:	6a03      	ldr	r3, [r0, #32]
 80011a4:	b90b      	cbnz	r3, 80011aa <_fflush_r+0x1a>
 80011a6:	f7ff fd31 	bl	8000c0c <__sinit>
 80011aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f3      	beq.n	800119a <_fflush_r+0xa>
 80011b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80011b4:	07d0      	lsls	r0, r2, #31
 80011b6:	d404      	bmi.n	80011c2 <_fflush_r+0x32>
 80011b8:	0599      	lsls	r1, r3, #22
 80011ba:	d402      	bmi.n	80011c2 <_fflush_r+0x32>
 80011bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011be:	f7ff ff18 	bl	8000ff2 <__retarget_lock_acquire_recursive>
 80011c2:	4628      	mov	r0, r5
 80011c4:	4621      	mov	r1, r4
 80011c6:	f7ff ff61 	bl	800108c <__sflush_r>
 80011ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80011cc:	07da      	lsls	r2, r3, #31
 80011ce:	4605      	mov	r5, r0
 80011d0:	d4e4      	bmi.n	800119c <_fflush_r+0xc>
 80011d2:	89a3      	ldrh	r3, [r4, #12]
 80011d4:	059b      	lsls	r3, r3, #22
 80011d6:	d4e1      	bmi.n	800119c <_fflush_r+0xc>
 80011d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011da:	f7ff ff0b 	bl	8000ff4 <__retarget_lock_release_recursive>
 80011de:	e7dd      	b.n	800119c <_fflush_r+0xc>

080011e0 <__swhatbuf_r>:
 80011e0:	b570      	push	{r4, r5, r6, lr}
 80011e2:	460c      	mov	r4, r1
 80011e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011e8:	2900      	cmp	r1, #0
 80011ea:	b096      	sub	sp, #88	; 0x58
 80011ec:	4615      	mov	r5, r2
 80011ee:	461e      	mov	r6, r3
 80011f0:	da0d      	bge.n	800120e <__swhatbuf_r+0x2e>
 80011f2:	89a3      	ldrh	r3, [r4, #12]
 80011f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80011f8:	f04f 0100 	mov.w	r1, #0
 80011fc:	bf0c      	ite	eq
 80011fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001202:	2340      	movne	r3, #64	; 0x40
 8001204:	2000      	movs	r0, #0
 8001206:	6031      	str	r1, [r6, #0]
 8001208:	602b      	str	r3, [r5, #0]
 800120a:	b016      	add	sp, #88	; 0x58
 800120c:	bd70      	pop	{r4, r5, r6, pc}
 800120e:	466a      	mov	r2, sp
 8001210:	f000 f848 	bl	80012a4 <_fstat_r>
 8001214:	2800      	cmp	r0, #0
 8001216:	dbec      	blt.n	80011f2 <__swhatbuf_r+0x12>
 8001218:	9901      	ldr	r1, [sp, #4]
 800121a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800121e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001222:	4259      	negs	r1, r3
 8001224:	4159      	adcs	r1, r3
 8001226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122a:	e7eb      	b.n	8001204 <__swhatbuf_r+0x24>

0800122c <__smakebuf_r>:
 800122c:	898b      	ldrh	r3, [r1, #12]
 800122e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001230:	079d      	lsls	r5, r3, #30
 8001232:	4606      	mov	r6, r0
 8001234:	460c      	mov	r4, r1
 8001236:	d507      	bpl.n	8001248 <__smakebuf_r+0x1c>
 8001238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800123c:	6023      	str	r3, [r4, #0]
 800123e:	6123      	str	r3, [r4, #16]
 8001240:	2301      	movs	r3, #1
 8001242:	6163      	str	r3, [r4, #20]
 8001244:	b002      	add	sp, #8
 8001246:	bd70      	pop	{r4, r5, r6, pc}
 8001248:	ab01      	add	r3, sp, #4
 800124a:	466a      	mov	r2, sp
 800124c:	f7ff ffc8 	bl	80011e0 <__swhatbuf_r>
 8001250:	9900      	ldr	r1, [sp, #0]
 8001252:	4605      	mov	r5, r0
 8001254:	4630      	mov	r0, r6
 8001256:	f7ff fbc1 	bl	80009dc <_malloc_r>
 800125a:	b948      	cbnz	r0, 8001270 <__smakebuf_r+0x44>
 800125c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001260:	059a      	lsls	r2, r3, #22
 8001262:	d4ef      	bmi.n	8001244 <__smakebuf_r+0x18>
 8001264:	f023 0303 	bic.w	r3, r3, #3
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	81a3      	strh	r3, [r4, #12]
 800126e:	e7e3      	b.n	8001238 <__smakebuf_r+0xc>
 8001270:	89a3      	ldrh	r3, [r4, #12]
 8001272:	6020      	str	r0, [r4, #0]
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	81a3      	strh	r3, [r4, #12]
 800127a:	9b00      	ldr	r3, [sp, #0]
 800127c:	6163      	str	r3, [r4, #20]
 800127e:	9b01      	ldr	r3, [sp, #4]
 8001280:	6120      	str	r0, [r4, #16]
 8001282:	b15b      	cbz	r3, 800129c <__smakebuf_r+0x70>
 8001284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001288:	4630      	mov	r0, r6
 800128a:	f000 f81d 	bl	80012c8 <_isatty_r>
 800128e:	b128      	cbz	r0, 800129c <__smakebuf_r+0x70>
 8001290:	89a3      	ldrh	r3, [r4, #12]
 8001292:	f023 0303 	bic.w	r3, r3, #3
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	81a3      	strh	r3, [r4, #12]
 800129c:	89a3      	ldrh	r3, [r4, #12]
 800129e:	431d      	orrs	r5, r3
 80012a0:	81a5      	strh	r5, [r4, #12]
 80012a2:	e7cf      	b.n	8001244 <__smakebuf_r+0x18>

080012a4 <_fstat_r>:
 80012a4:	b538      	push	{r3, r4, r5, lr}
 80012a6:	4d07      	ldr	r5, [pc, #28]	; (80012c4 <_fstat_r+0x20>)
 80012a8:	2300      	movs	r3, #0
 80012aa:	4604      	mov	r4, r0
 80012ac:	4608      	mov	r0, r1
 80012ae:	4611      	mov	r1, r2
 80012b0:	602b      	str	r3, [r5, #0]
 80012b2:	f7ff fae5 	bl	8000880 <_fstat>
 80012b6:	1c43      	adds	r3, r0, #1
 80012b8:	d102      	bne.n	80012c0 <_fstat_r+0x1c>
 80012ba:	682b      	ldr	r3, [r5, #0]
 80012bc:	b103      	cbz	r3, 80012c0 <_fstat_r+0x1c>
 80012be:	6023      	str	r3, [r4, #0]
 80012c0:	bd38      	pop	{r3, r4, r5, pc}
 80012c2:	bf00      	nop
 80012c4:	200001d0 	.word	0x200001d0

080012c8 <_isatty_r>:
 80012c8:	b538      	push	{r3, r4, r5, lr}
 80012ca:	4d06      	ldr	r5, [pc, #24]	; (80012e4 <_isatty_r+0x1c>)
 80012cc:	2300      	movs	r3, #0
 80012ce:	4604      	mov	r4, r0
 80012d0:	4608      	mov	r0, r1
 80012d2:	602b      	str	r3, [r5, #0]
 80012d4:	f7ff fae3 	bl	800089e <_isatty>
 80012d8:	1c43      	adds	r3, r0, #1
 80012da:	d102      	bne.n	80012e2 <_isatty_r+0x1a>
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	b103      	cbz	r3, 80012e2 <_isatty_r+0x1a>
 80012e0:	6023      	str	r3, [r4, #0]
 80012e2:	bd38      	pop	{r3, r4, r5, pc}
 80012e4:	200001d0 	.word	0x200001d0

080012e8 <_init>:
 80012e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ea:	bf00      	nop
 80012ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ee:	bc08      	pop	{r3}
 80012f0:	469e      	mov	lr, r3
 80012f2:	4770      	bx	lr

080012f4 <_fini>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	bf00      	nop
 80012f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012fa:	bc08      	pop	{r3}
 80012fc:	469e      	mov	lr, r3
 80012fe:	4770      	bx	lr
