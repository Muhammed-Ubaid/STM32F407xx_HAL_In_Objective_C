
STM32F407xx_GPIO_Driver_In_Objective_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e88  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001030  08001030  00011030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001040  08001040  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001040  08001040  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001040  08001040  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001040  08001040  00011040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001044  08001044  00011044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000113c  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000048d  00000000  00000000  00021205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000140  00000000  00000000  00021698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000d9  00000000  00000000  000217d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000034a0  00000000  00000000  000218b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001df4  00000000  00000000  00024d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000ba2b  00000000  00000000  00026b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000a60  00000000  00000000  00032570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a8  00000000  00000000  00032fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000005c 	.word	0x2000005c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001018 	.word	0x08001018

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000060 	.word	0x20000060
 80001e4:	08001018 	.word	0x08001018

080001e8 <GPIO_PeriClockControl>:
#include<stdint.h>
#include <STM32F407xx_GPIO_Driver_Definitions_Public.h>
#include <STM32F407xx_GPIO_Driver_Definitions_Private.h>

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d162      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a64      	ldr	r2, [pc, #400]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000202:	4b64      	ldr	r3, [pc, #400]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a63      	ldr	r2, [pc, #396]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
		{
			/* Handle default error*/
		}

	}
}
 800020e:	e0b9      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a61      	ldr	r2, [pc, #388]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b5e      	ldr	r3, [pc, #376]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a5d      	ldr	r2, [pc, #372]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e0ae      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a5c      	ldr	r2, [pc, #368]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a58      	ldr	r2, [pc, #352]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a53      	ldr	r2, [pc, #332]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4f      	ldr	r2, [pc, #316]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a4a      	ldr	r2, [pc, #296]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a46      	ldr	r2, [pc, #280]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d168      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a33      	ldr	r2, [pc, #204]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2f      	ldr	r2, [pc, #188]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e4:	f023 0302 	bic.w	r3, r3, #2
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2b      	ldr	r2, [pc, #172]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002fa:	f023 0304 	bic.w	r3, r3, #4
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a26      	ldr	r2, [pc, #152]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000310:	f023 0308 	bic.w	r3, r3, #8
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a22      	ldr	r2, [pc, #136]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000326:	f023 0310 	bic.w	r3, r3, #16
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800033c:	f023 0320 	bic.w	r3, r3, #32
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a10      	ldr	r2, [pc, #64]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00
 80003b4:	40022000 	.word	0x40022000

080003b8 <GPIO_Init>:

void GPIO_Init(GPIO_Config_UserHandle_t UserHandle)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b092      	sub	sp, #72	; 0x48
 80003bc:	af00      	add	r7, sp, #0
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	GPIO_Handle_t initializer = {0};
 80003c4:	f107 0314 	add.w	r3, r7, #20
 80003c8:	2230      	movs	r2, #48	; 0x30
 80003ca:	2100      	movs	r1, #0
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 fc1f 	bl	8000c10 <memset>
	uint32_t temp_var = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	647b      	str	r3, [r7, #68]	; 0x44
	//Create & Initialize private data
	UserHandle.Private_GPIO_Data = (GPIO_RegDef_t*) malloc(sizeof(GPIO_RegDef_t));
 80003d6:	2028      	movs	r0, #40	; 0x28
 80003d8:	f000 f970 	bl	80006bc <malloc>
 80003dc:	4603      	mov	r3, r0
 80003de:	607b      	str	r3, [r7, #4]

	//point to requested GPIO base address to init private instance and enable clock
	if(UserHandle.GPIO_PORT == PORT_GPIOA)
 80003e0:	7a3b      	ldrb	r3, [r7, #8]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d106      	bne.n	80003f4 <GPIO_Init+0x3c>
	{
		UserHandle.Private_GPIO_Data = GPIOA;
 80003e6:	4b2d      	ldr	r3, [pc, #180]	; (800049c <GPIO_Init+0xe4>)
 80003e8:	607b      	str	r3, [r7, #4]
		GPIO_PeriClockControl(GPIOA,ENABLE);
 80003ea:	2101      	movs	r1, #1
 80003ec:	482b      	ldr	r0, [pc, #172]	; (800049c <GPIO_Init+0xe4>)
 80003ee:	f7ff fefb 	bl	80001e8 <GPIO_PeriClockControl>
	{
		UserHandle.Private_GPIO_Data = GPIOI;
		GPIO_PeriClockControl(GPIOI,ENABLE);
	}

}
 80003f2:	e04e      	b.n	8000492 <GPIO_Init+0xda>
	else if(UserHandle.GPIO_PORT == PORT_GPIOB)
 80003f4:	7a3b      	ldrb	r3, [r7, #8]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d106      	bne.n	8000408 <GPIO_Init+0x50>
		UserHandle.Private_GPIO_Data = GPIOB;
 80003fa:	4b29      	ldr	r3, [pc, #164]	; (80004a0 <GPIO_Init+0xe8>)
 80003fc:	607b      	str	r3, [r7, #4]
		GPIO_PeriClockControl(GPIOB,ENABLE);
 80003fe:	2101      	movs	r1, #1
 8000400:	4827      	ldr	r0, [pc, #156]	; (80004a0 <GPIO_Init+0xe8>)
 8000402:	f7ff fef1 	bl	80001e8 <GPIO_PeriClockControl>
}
 8000406:	e044      	b.n	8000492 <GPIO_Init+0xda>
	else if(UserHandle.GPIO_PORT == PORT_GPIOC)
 8000408:	7a3b      	ldrb	r3, [r7, #8]
 800040a:	2b02      	cmp	r3, #2
 800040c:	d106      	bne.n	800041c <GPIO_Init+0x64>
		UserHandle.Private_GPIO_Data = GPIOC;
 800040e:	4b25      	ldr	r3, [pc, #148]	; (80004a4 <GPIO_Init+0xec>)
 8000410:	607b      	str	r3, [r7, #4]
		GPIO_PeriClockControl(GPIOC,ENABLE);
 8000412:	2101      	movs	r1, #1
 8000414:	4823      	ldr	r0, [pc, #140]	; (80004a4 <GPIO_Init+0xec>)
 8000416:	f7ff fee7 	bl	80001e8 <GPIO_PeriClockControl>
}
 800041a:	e03a      	b.n	8000492 <GPIO_Init+0xda>
	else if(UserHandle.GPIO_PORT == PORT_GPIOD)
 800041c:	7a3b      	ldrb	r3, [r7, #8]
 800041e:	2b03      	cmp	r3, #3
 8000420:	d106      	bne.n	8000430 <GPIO_Init+0x78>
		UserHandle.Private_GPIO_Data = GPIOD;
 8000422:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <GPIO_Init+0xf0>)
 8000424:	607b      	str	r3, [r7, #4]
		GPIO_PeriClockControl(GPIOD,ENABLE);
 8000426:	2101      	movs	r1, #1
 8000428:	481f      	ldr	r0, [pc, #124]	; (80004a8 <GPIO_Init+0xf0>)
 800042a:	f7ff fedd 	bl	80001e8 <GPIO_PeriClockControl>
}
 800042e:	e030      	b.n	8000492 <GPIO_Init+0xda>
	else if(UserHandle.GPIO_PORT == PORT_GPIOE)
 8000430:	7a3b      	ldrb	r3, [r7, #8]
 8000432:	2b04      	cmp	r3, #4
 8000434:	d106      	bne.n	8000444 <GPIO_Init+0x8c>
		UserHandle.Private_GPIO_Data = GPIOE;
 8000436:	4b1d      	ldr	r3, [pc, #116]	; (80004ac <GPIO_Init+0xf4>)
 8000438:	607b      	str	r3, [r7, #4]
		GPIO_PeriClockControl(GPIOE,ENABLE);
 800043a:	2101      	movs	r1, #1
 800043c:	481b      	ldr	r0, [pc, #108]	; (80004ac <GPIO_Init+0xf4>)
 800043e:	f7ff fed3 	bl	80001e8 <GPIO_PeriClockControl>
}
 8000442:	e026      	b.n	8000492 <GPIO_Init+0xda>
	else if(UserHandle.GPIO_PORT == PORT_GPIOF)
 8000444:	7a3b      	ldrb	r3, [r7, #8]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d106      	bne.n	8000458 <GPIO_Init+0xa0>
		UserHandle.Private_GPIO_Data = GPIOF;
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <GPIO_Init+0xf8>)
 800044c:	607b      	str	r3, [r7, #4]
		GPIO_PeriClockControl(GPIOF,ENABLE);
 800044e:	2101      	movs	r1, #1
 8000450:	4817      	ldr	r0, [pc, #92]	; (80004b0 <GPIO_Init+0xf8>)
 8000452:	f7ff fec9 	bl	80001e8 <GPIO_PeriClockControl>
}
 8000456:	e01c      	b.n	8000492 <GPIO_Init+0xda>
	else if(UserHandle.GPIO_PORT == PORT_GPIOG)
 8000458:	7a3b      	ldrb	r3, [r7, #8]
 800045a:	2b06      	cmp	r3, #6
 800045c:	d106      	bne.n	800046c <GPIO_Init+0xb4>
		UserHandle.Private_GPIO_Data = GPIOG;
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <GPIO_Init+0xfc>)
 8000460:	607b      	str	r3, [r7, #4]
		GPIO_PeriClockControl(GPIOG,ENABLE);
 8000462:	2101      	movs	r1, #1
 8000464:	4813      	ldr	r0, [pc, #76]	; (80004b4 <GPIO_Init+0xfc>)
 8000466:	f7ff febf 	bl	80001e8 <GPIO_PeriClockControl>
}
 800046a:	e012      	b.n	8000492 <GPIO_Init+0xda>
	else if(UserHandle.GPIO_PORT == PORT_GPIOH)
 800046c:	7a3b      	ldrb	r3, [r7, #8]
 800046e:	2b07      	cmp	r3, #7
 8000470:	d106      	bne.n	8000480 <GPIO_Init+0xc8>
		UserHandle.Private_GPIO_Data = GPIOH;
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <GPIO_Init+0x100>)
 8000474:	607b      	str	r3, [r7, #4]
		GPIO_PeriClockControl(GPIOH,ENABLE);
 8000476:	2101      	movs	r1, #1
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <GPIO_Init+0x100>)
 800047a:	f7ff feb5 	bl	80001e8 <GPIO_PeriClockControl>
}
 800047e:	e008      	b.n	8000492 <GPIO_Init+0xda>
	else if(UserHandle.GPIO_PORT == PORT_GPIOI)
 8000480:	7a3b      	ldrb	r3, [r7, #8]
 8000482:	2b08      	cmp	r3, #8
 8000484:	d105      	bne.n	8000492 <GPIO_Init+0xda>
		UserHandle.Private_GPIO_Data = GPIOI;
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <GPIO_Init+0x104>)
 8000488:	607b      	str	r3, [r7, #4]
		GPIO_PeriClockControl(GPIOI,ENABLE);
 800048a:	2101      	movs	r1, #1
 800048c:	480b      	ldr	r0, [pc, #44]	; (80004bc <GPIO_Init+0x104>)
 800048e:	f7ff feab 	bl	80001e8 <GPIO_PeriClockControl>
}
 8000492:	bf00      	nop
 8000494:	3748      	adds	r7, #72	; 0x48
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40020000 	.word	0x40020000
 80004a0:	40020400 	.word	0x40020400
 80004a4:	40020800 	.word	0x40020800
 80004a8:	40020c00 	.word	0x40020c00
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40021400 	.word	0x40021400
 80004b4:	40021800 	.word	0x40021800
 80004b8:	40021c00 	.word	0x40021c00
 80004bc:	40022000 	.word	0x40022000

080004c0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
    /* Loop forever */
	GPIO_Config_UserHandle_t UserHandle;

	GPIO_Init(UserHandle);
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80004cc:	f7ff ff74 	bl	80003b8 <GPIO_Init>
	printf("\n ...main... \n");
 80004d0:	4801      	ldr	r0, [pc, #4]	; (80004d8 <main+0x18>)
 80004d2:	f000 fabd 	bl	8000a50 <puts>
	for(;;);
 80004d6:	e7fe      	b.n	80004d6 <main+0x16>
 80004d8:	08001030 	.word	0x08001030

080004dc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <ITM_SendChar+0x44>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <ITM_SendChar+0x44>)
 80004ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004f0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <ITM_SendChar+0x48>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <ITM_SendChar+0x48>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004fe:	bf00      	nop
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f8      	beq.n	8000500 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800050e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	6013      	str	r3, [r2, #0]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	e000edfc 	.word	0xe000edfc
 8000524:	e0000e00 	.word	0xe0000e00

08000528 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	e00a      	b.n	8000550 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800053a:	f3af 8000 	nop.w
 800053e:	4601      	mov	r1, r0
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	1c5a      	adds	r2, r3, #1
 8000544:	60ba      	str	r2, [r7, #8]
 8000546:	b2ca      	uxtb	r2, r1
 8000548:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	3301      	adds	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	697a      	ldr	r2, [r7, #20]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	429a      	cmp	r2, r3
 8000556:	dbf0      	blt.n	800053a <_read+0x12>
  }

  return len;
 8000558:	687b      	ldr	r3, [r7, #4]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b086      	sub	sp, #24
 8000566:	af00      	add	r7, sp, #0
 8000568:	60f8      	str	r0, [r7, #12]
 800056a:	60b9      	str	r1, [r7, #8]
 800056c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	e009      	b.n	8000588 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	60ba      	str	r2, [r7, #8]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ffad 	bl	80004dc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	3301      	adds	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	697a      	ldr	r2, [r7, #20]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	429a      	cmp	r2, r3
 800058e:	dbf1      	blt.n	8000574 <_write+0x12>
  }
  return len;
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <_close>:

int _close(int file)
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005c0:	605a      	str	r2, [r3, #4]
  return 0;
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <_isatty>:

int _isatty(int file)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005d6:	2301      	movs	r3, #1
}
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr

080005e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b085      	sub	sp, #20
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
	...

080005fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <_sbrk+0x5c>)
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <_sbrk+0x60>)
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <_sbrk+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d102      	bne.n	800061e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <_sbrk+0x64>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <_sbrk+0x68>)
 800061c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <_sbrk+0x64>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	429a      	cmp	r2, r3
 800062a:	d207      	bcs.n	800063c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800062c:	f000 fb4e 	bl	8000ccc <__errno>
 8000630:	4603      	mov	r3, r0
 8000632:	220c      	movs	r2, #12
 8000634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	e009      	b.n	8000650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <_sbrk+0x64>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <_sbrk+0x64>)
 800064c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20020000 	.word	0x20020000
 800065c:	00000400 	.word	0x00000400
 8000660:	20000078 	.word	0x20000078
 8000664:	200001c8 	.word	0x200001c8

08000668 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800066c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	; (80006a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	; (80006b4 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000696:	f000 fb1f 	bl	8000cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069a:	f7ff ff11 	bl	80004c0 <main>

0800069e <LoopForever>:

LoopForever:
  b LoopForever
 800069e:	e7fe      	b.n	800069e <LoopForever>
  ldr   r0, =_estack
 80006a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006ac:	08001048 	.word	0x08001048
  ldr r2, =_sbss
 80006b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006b4:	200001c8 	.word	0x200001c8

080006b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC_IRQHandler>
	...

080006bc <malloc>:
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <malloc+0xc>)
 80006be:	4601      	mov	r1, r0
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	f000 b823 	b.w	800070c <_malloc_r>
 80006c6:	bf00      	nop
 80006c8:	20000058 	.word	0x20000058

080006cc <sbrk_aligned>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	4e0e      	ldr	r6, [pc, #56]	; (8000708 <sbrk_aligned+0x3c>)
 80006d0:	460c      	mov	r4, r1
 80006d2:	6831      	ldr	r1, [r6, #0]
 80006d4:	4605      	mov	r5, r0
 80006d6:	b911      	cbnz	r1, 80006de <sbrk_aligned+0x12>
 80006d8:	f000 fad6 	bl	8000c88 <_sbrk_r>
 80006dc:	6030      	str	r0, [r6, #0]
 80006de:	4621      	mov	r1, r4
 80006e0:	4628      	mov	r0, r5
 80006e2:	f000 fad1 	bl	8000c88 <_sbrk_r>
 80006e6:	1c43      	adds	r3, r0, #1
 80006e8:	d00a      	beq.n	8000700 <sbrk_aligned+0x34>
 80006ea:	1cc4      	adds	r4, r0, #3
 80006ec:	f024 0403 	bic.w	r4, r4, #3
 80006f0:	42a0      	cmp	r0, r4
 80006f2:	d007      	beq.n	8000704 <sbrk_aligned+0x38>
 80006f4:	1a21      	subs	r1, r4, r0
 80006f6:	4628      	mov	r0, r5
 80006f8:	f000 fac6 	bl	8000c88 <_sbrk_r>
 80006fc:	3001      	adds	r0, #1
 80006fe:	d101      	bne.n	8000704 <sbrk_aligned+0x38>
 8000700:	f04f 34ff 	mov.w	r4, #4294967295
 8000704:	4620      	mov	r0, r4
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	20000080 	.word	0x20000080

0800070c <_malloc_r>:
 800070c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000710:	1ccd      	adds	r5, r1, #3
 8000712:	f025 0503 	bic.w	r5, r5, #3
 8000716:	3508      	adds	r5, #8
 8000718:	2d0c      	cmp	r5, #12
 800071a:	bf38      	it	cc
 800071c:	250c      	movcc	r5, #12
 800071e:	2d00      	cmp	r5, #0
 8000720:	4607      	mov	r7, r0
 8000722:	db01      	blt.n	8000728 <_malloc_r+0x1c>
 8000724:	42a9      	cmp	r1, r5
 8000726:	d905      	bls.n	8000734 <_malloc_r+0x28>
 8000728:	230c      	movs	r3, #12
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	2600      	movs	r6, #0
 800072e:	4630      	mov	r0, r6
 8000730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000734:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000808 <_malloc_r+0xfc>
 8000738:	f000 f868 	bl	800080c <__malloc_lock>
 800073c:	f8d8 3000 	ldr.w	r3, [r8]
 8000740:	461c      	mov	r4, r3
 8000742:	bb5c      	cbnz	r4, 800079c <_malloc_r+0x90>
 8000744:	4629      	mov	r1, r5
 8000746:	4638      	mov	r0, r7
 8000748:	f7ff ffc0 	bl	80006cc <sbrk_aligned>
 800074c:	1c43      	adds	r3, r0, #1
 800074e:	4604      	mov	r4, r0
 8000750:	d155      	bne.n	80007fe <_malloc_r+0xf2>
 8000752:	f8d8 4000 	ldr.w	r4, [r8]
 8000756:	4626      	mov	r6, r4
 8000758:	2e00      	cmp	r6, #0
 800075a:	d145      	bne.n	80007e8 <_malloc_r+0xdc>
 800075c:	2c00      	cmp	r4, #0
 800075e:	d048      	beq.n	80007f2 <_malloc_r+0xe6>
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	4631      	mov	r1, r6
 8000764:	4638      	mov	r0, r7
 8000766:	eb04 0903 	add.w	r9, r4, r3
 800076a:	f000 fa8d 	bl	8000c88 <_sbrk_r>
 800076e:	4581      	cmp	r9, r0
 8000770:	d13f      	bne.n	80007f2 <_malloc_r+0xe6>
 8000772:	6821      	ldr	r1, [r4, #0]
 8000774:	1a6d      	subs	r5, r5, r1
 8000776:	4629      	mov	r1, r5
 8000778:	4638      	mov	r0, r7
 800077a:	f7ff ffa7 	bl	80006cc <sbrk_aligned>
 800077e:	3001      	adds	r0, #1
 8000780:	d037      	beq.n	80007f2 <_malloc_r+0xe6>
 8000782:	6823      	ldr	r3, [r4, #0]
 8000784:	442b      	add	r3, r5
 8000786:	6023      	str	r3, [r4, #0]
 8000788:	f8d8 3000 	ldr.w	r3, [r8]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d038      	beq.n	8000802 <_malloc_r+0xf6>
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	42a2      	cmp	r2, r4
 8000794:	d12b      	bne.n	80007ee <_malloc_r+0xe2>
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	e00f      	b.n	80007bc <_malloc_r+0xb0>
 800079c:	6822      	ldr	r2, [r4, #0]
 800079e:	1b52      	subs	r2, r2, r5
 80007a0:	d41f      	bmi.n	80007e2 <_malloc_r+0xd6>
 80007a2:	2a0b      	cmp	r2, #11
 80007a4:	d917      	bls.n	80007d6 <_malloc_r+0xca>
 80007a6:	1961      	adds	r1, r4, r5
 80007a8:	42a3      	cmp	r3, r4
 80007aa:	6025      	str	r5, [r4, #0]
 80007ac:	bf18      	it	ne
 80007ae:	6059      	strne	r1, [r3, #4]
 80007b0:	6863      	ldr	r3, [r4, #4]
 80007b2:	bf08      	it	eq
 80007b4:	f8c8 1000 	streq.w	r1, [r8]
 80007b8:	5162      	str	r2, [r4, r5]
 80007ba:	604b      	str	r3, [r1, #4]
 80007bc:	4638      	mov	r0, r7
 80007be:	f104 060b 	add.w	r6, r4, #11
 80007c2:	f000 f829 	bl	8000818 <__malloc_unlock>
 80007c6:	f026 0607 	bic.w	r6, r6, #7
 80007ca:	1d23      	adds	r3, r4, #4
 80007cc:	1af2      	subs	r2, r6, r3
 80007ce:	d0ae      	beq.n	800072e <_malloc_r+0x22>
 80007d0:	1b9b      	subs	r3, r3, r6
 80007d2:	50a3      	str	r3, [r4, r2]
 80007d4:	e7ab      	b.n	800072e <_malloc_r+0x22>
 80007d6:	42a3      	cmp	r3, r4
 80007d8:	6862      	ldr	r2, [r4, #4]
 80007da:	d1dd      	bne.n	8000798 <_malloc_r+0x8c>
 80007dc:	f8c8 2000 	str.w	r2, [r8]
 80007e0:	e7ec      	b.n	80007bc <_malloc_r+0xb0>
 80007e2:	4623      	mov	r3, r4
 80007e4:	6864      	ldr	r4, [r4, #4]
 80007e6:	e7ac      	b.n	8000742 <_malloc_r+0x36>
 80007e8:	4634      	mov	r4, r6
 80007ea:	6876      	ldr	r6, [r6, #4]
 80007ec:	e7b4      	b.n	8000758 <_malloc_r+0x4c>
 80007ee:	4613      	mov	r3, r2
 80007f0:	e7cc      	b.n	800078c <_malloc_r+0x80>
 80007f2:	230c      	movs	r3, #12
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4638      	mov	r0, r7
 80007f8:	f000 f80e 	bl	8000818 <__malloc_unlock>
 80007fc:	e797      	b.n	800072e <_malloc_r+0x22>
 80007fe:	6025      	str	r5, [r4, #0]
 8000800:	e7dc      	b.n	80007bc <_malloc_r+0xb0>
 8000802:	605b      	str	r3, [r3, #4]
 8000804:	deff      	udf	#255	; 0xff
 8000806:	bf00      	nop
 8000808:	2000007c 	.word	0x2000007c

0800080c <__malloc_lock>:
 800080c:	4801      	ldr	r0, [pc, #4]	; (8000814 <__malloc_lock+0x8>)
 800080e:	f000 ba88 	b.w	8000d22 <__retarget_lock_acquire_recursive>
 8000812:	bf00      	nop
 8000814:	200001c4 	.word	0x200001c4

08000818 <__malloc_unlock>:
 8000818:	4801      	ldr	r0, [pc, #4]	; (8000820 <__malloc_unlock+0x8>)
 800081a:	f000 ba83 	b.w	8000d24 <__retarget_lock_release_recursive>
 800081e:	bf00      	nop
 8000820:	200001c4 	.word	0x200001c4

08000824 <std>:
 8000824:	2300      	movs	r3, #0
 8000826:	b510      	push	{r4, lr}
 8000828:	4604      	mov	r4, r0
 800082a:	e9c0 3300 	strd	r3, r3, [r0]
 800082e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000832:	6083      	str	r3, [r0, #8]
 8000834:	8181      	strh	r1, [r0, #12]
 8000836:	6643      	str	r3, [r0, #100]	; 0x64
 8000838:	81c2      	strh	r2, [r0, #14]
 800083a:	6183      	str	r3, [r0, #24]
 800083c:	4619      	mov	r1, r3
 800083e:	2208      	movs	r2, #8
 8000840:	305c      	adds	r0, #92	; 0x5c
 8000842:	f000 f9e5 	bl	8000c10 <memset>
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <std+0x58>)
 8000848:	6263      	str	r3, [r4, #36]	; 0x24
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <std+0x5c>)
 800084c:	62a3      	str	r3, [r4, #40]	; 0x28
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <std+0x60>)
 8000850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <std+0x64>)
 8000854:	6323      	str	r3, [r4, #48]	; 0x30
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <std+0x68>)
 8000858:	6224      	str	r4, [r4, #32]
 800085a:	429c      	cmp	r4, r3
 800085c:	d006      	beq.n	800086c <std+0x48>
 800085e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000862:	4294      	cmp	r4, r2
 8000864:	d002      	beq.n	800086c <std+0x48>
 8000866:	33d0      	adds	r3, #208	; 0xd0
 8000868:	429c      	cmp	r4, r3
 800086a:	d105      	bne.n	8000878 <std+0x54>
 800086c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000874:	f000 ba54 	b.w	8000d20 <__retarget_lock_init_recursive>
 8000878:	bd10      	pop	{r4, pc}
 800087a:	bf00      	nop
 800087c:	08000a61 	.word	0x08000a61
 8000880:	08000a83 	.word	0x08000a83
 8000884:	08000abb 	.word	0x08000abb
 8000888:	08000adf 	.word	0x08000adf
 800088c:	20000084 	.word	0x20000084

08000890 <stdio_exit_handler>:
 8000890:	4a02      	ldr	r2, [pc, #8]	; (800089c <stdio_exit_handler+0xc>)
 8000892:	4903      	ldr	r1, [pc, #12]	; (80008a0 <stdio_exit_handler+0x10>)
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <stdio_exit_handler+0x14>)
 8000896:	f000 b869 	b.w	800096c <_fwalk_sglue>
 800089a:	bf00      	nop
 800089c:	20000000 	.word	0x20000000
 80008a0:	08000ec1 	.word	0x08000ec1
 80008a4:	2000000c 	.word	0x2000000c

080008a8 <cleanup_stdio>:
 80008a8:	6841      	ldr	r1, [r0, #4]
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <cleanup_stdio+0x34>)
 80008ac:	4299      	cmp	r1, r3
 80008ae:	b510      	push	{r4, lr}
 80008b0:	4604      	mov	r4, r0
 80008b2:	d001      	beq.n	80008b8 <cleanup_stdio+0x10>
 80008b4:	f000 fb04 	bl	8000ec0 <_fflush_r>
 80008b8:	68a1      	ldr	r1, [r4, #8]
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <cleanup_stdio+0x38>)
 80008bc:	4299      	cmp	r1, r3
 80008be:	d002      	beq.n	80008c6 <cleanup_stdio+0x1e>
 80008c0:	4620      	mov	r0, r4
 80008c2:	f000 fafd 	bl	8000ec0 <_fflush_r>
 80008c6:	68e1      	ldr	r1, [r4, #12]
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <cleanup_stdio+0x3c>)
 80008ca:	4299      	cmp	r1, r3
 80008cc:	d004      	beq.n	80008d8 <cleanup_stdio+0x30>
 80008ce:	4620      	mov	r0, r4
 80008d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008d4:	f000 baf4 	b.w	8000ec0 <_fflush_r>
 80008d8:	bd10      	pop	{r4, pc}
 80008da:	bf00      	nop
 80008dc:	20000084 	.word	0x20000084
 80008e0:	200000ec 	.word	0x200000ec
 80008e4:	20000154 	.word	0x20000154

080008e8 <global_stdio_init.part.0>:
 80008e8:	b510      	push	{r4, lr}
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <global_stdio_init.part.0+0x30>)
 80008ec:	4c0b      	ldr	r4, [pc, #44]	; (800091c <global_stdio_init.part.0+0x34>)
 80008ee:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <global_stdio_init.part.0+0x38>)
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	4620      	mov	r0, r4
 80008f4:	2200      	movs	r2, #0
 80008f6:	2104      	movs	r1, #4
 80008f8:	f7ff ff94 	bl	8000824 <std>
 80008fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000900:	2201      	movs	r2, #1
 8000902:	2109      	movs	r1, #9
 8000904:	f7ff ff8e 	bl	8000824 <std>
 8000908:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800090c:	2202      	movs	r2, #2
 800090e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000912:	2112      	movs	r1, #18
 8000914:	f7ff bf86 	b.w	8000824 <std>
 8000918:	200001bc 	.word	0x200001bc
 800091c:	20000084 	.word	0x20000084
 8000920:	08000891 	.word	0x08000891

08000924 <__sfp_lock_acquire>:
 8000924:	4801      	ldr	r0, [pc, #4]	; (800092c <__sfp_lock_acquire+0x8>)
 8000926:	f000 b9fc 	b.w	8000d22 <__retarget_lock_acquire_recursive>
 800092a:	bf00      	nop
 800092c:	200001c5 	.word	0x200001c5

08000930 <__sfp_lock_release>:
 8000930:	4801      	ldr	r0, [pc, #4]	; (8000938 <__sfp_lock_release+0x8>)
 8000932:	f000 b9f7 	b.w	8000d24 <__retarget_lock_release_recursive>
 8000936:	bf00      	nop
 8000938:	200001c5 	.word	0x200001c5

0800093c <__sinit>:
 800093c:	b510      	push	{r4, lr}
 800093e:	4604      	mov	r4, r0
 8000940:	f7ff fff0 	bl	8000924 <__sfp_lock_acquire>
 8000944:	6a23      	ldr	r3, [r4, #32]
 8000946:	b11b      	cbz	r3, 8000950 <__sinit+0x14>
 8000948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800094c:	f7ff bff0 	b.w	8000930 <__sfp_lock_release>
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <__sinit+0x28>)
 8000952:	6223      	str	r3, [r4, #32]
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <__sinit+0x2c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1f5      	bne.n	8000948 <__sinit+0xc>
 800095c:	f7ff ffc4 	bl	80008e8 <global_stdio_init.part.0>
 8000960:	e7f2      	b.n	8000948 <__sinit+0xc>
 8000962:	bf00      	nop
 8000964:	080008a9 	.word	0x080008a9
 8000968:	200001bc 	.word	0x200001bc

0800096c <_fwalk_sglue>:
 800096c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000970:	4607      	mov	r7, r0
 8000972:	4688      	mov	r8, r1
 8000974:	4614      	mov	r4, r2
 8000976:	2600      	movs	r6, #0
 8000978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800097c:	f1b9 0901 	subs.w	r9, r9, #1
 8000980:	d505      	bpl.n	800098e <_fwalk_sglue+0x22>
 8000982:	6824      	ldr	r4, [r4, #0]
 8000984:	2c00      	cmp	r4, #0
 8000986:	d1f7      	bne.n	8000978 <_fwalk_sglue+0xc>
 8000988:	4630      	mov	r0, r6
 800098a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800098e:	89ab      	ldrh	r3, [r5, #12]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d907      	bls.n	80009a4 <_fwalk_sglue+0x38>
 8000994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000998:	3301      	adds	r3, #1
 800099a:	d003      	beq.n	80009a4 <_fwalk_sglue+0x38>
 800099c:	4629      	mov	r1, r5
 800099e:	4638      	mov	r0, r7
 80009a0:	47c0      	blx	r8
 80009a2:	4306      	orrs	r6, r0
 80009a4:	3568      	adds	r5, #104	; 0x68
 80009a6:	e7e9      	b.n	800097c <_fwalk_sglue+0x10>

080009a8 <_puts_r>:
 80009a8:	6a03      	ldr	r3, [r0, #32]
 80009aa:	b570      	push	{r4, r5, r6, lr}
 80009ac:	6884      	ldr	r4, [r0, #8]
 80009ae:	4605      	mov	r5, r0
 80009b0:	460e      	mov	r6, r1
 80009b2:	b90b      	cbnz	r3, 80009b8 <_puts_r+0x10>
 80009b4:	f7ff ffc2 	bl	800093c <__sinit>
 80009b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009ba:	07db      	lsls	r3, r3, #31
 80009bc:	d405      	bmi.n	80009ca <_puts_r+0x22>
 80009be:	89a3      	ldrh	r3, [r4, #12]
 80009c0:	0598      	lsls	r0, r3, #22
 80009c2:	d402      	bmi.n	80009ca <_puts_r+0x22>
 80009c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009c6:	f000 f9ac 	bl	8000d22 <__retarget_lock_acquire_recursive>
 80009ca:	89a3      	ldrh	r3, [r4, #12]
 80009cc:	0719      	lsls	r1, r3, #28
 80009ce:	d513      	bpl.n	80009f8 <_puts_r+0x50>
 80009d0:	6923      	ldr	r3, [r4, #16]
 80009d2:	b18b      	cbz	r3, 80009f8 <_puts_r+0x50>
 80009d4:	3e01      	subs	r6, #1
 80009d6:	68a3      	ldr	r3, [r4, #8]
 80009d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009dc:	3b01      	subs	r3, #1
 80009de:	60a3      	str	r3, [r4, #8]
 80009e0:	b9e9      	cbnz	r1, 8000a1e <_puts_r+0x76>
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	da2e      	bge.n	8000a44 <_puts_r+0x9c>
 80009e6:	4622      	mov	r2, r4
 80009e8:	210a      	movs	r1, #10
 80009ea:	4628      	mov	r0, r5
 80009ec:	f000 f87b 	bl	8000ae6 <__swbuf_r>
 80009f0:	3001      	adds	r0, #1
 80009f2:	d007      	beq.n	8000a04 <_puts_r+0x5c>
 80009f4:	250a      	movs	r5, #10
 80009f6:	e007      	b.n	8000a08 <_puts_r+0x60>
 80009f8:	4621      	mov	r1, r4
 80009fa:	4628      	mov	r0, r5
 80009fc:	f000 f8b0 	bl	8000b60 <__swsetup_r>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d0e7      	beq.n	80009d4 <_puts_r+0x2c>
 8000a04:	f04f 35ff 	mov.w	r5, #4294967295
 8000a08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a0a:	07da      	lsls	r2, r3, #31
 8000a0c:	d405      	bmi.n	8000a1a <_puts_r+0x72>
 8000a0e:	89a3      	ldrh	r3, [r4, #12]
 8000a10:	059b      	lsls	r3, r3, #22
 8000a12:	d402      	bmi.n	8000a1a <_puts_r+0x72>
 8000a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a16:	f000 f985 	bl	8000d24 <__retarget_lock_release_recursive>
 8000a1a:	4628      	mov	r0, r5
 8000a1c:	bd70      	pop	{r4, r5, r6, pc}
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	da04      	bge.n	8000a2c <_puts_r+0x84>
 8000a22:	69a2      	ldr	r2, [r4, #24]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dc06      	bgt.n	8000a36 <_puts_r+0x8e>
 8000a28:	290a      	cmp	r1, #10
 8000a2a:	d004      	beq.n	8000a36 <_puts_r+0x8e>
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	6022      	str	r2, [r4, #0]
 8000a32:	7019      	strb	r1, [r3, #0]
 8000a34:	e7cf      	b.n	80009d6 <_puts_r+0x2e>
 8000a36:	4622      	mov	r2, r4
 8000a38:	4628      	mov	r0, r5
 8000a3a:	f000 f854 	bl	8000ae6 <__swbuf_r>
 8000a3e:	3001      	adds	r0, #1
 8000a40:	d1c9      	bne.n	80009d6 <_puts_r+0x2e>
 8000a42:	e7df      	b.n	8000a04 <_puts_r+0x5c>
 8000a44:	6823      	ldr	r3, [r4, #0]
 8000a46:	250a      	movs	r5, #10
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	6022      	str	r2, [r4, #0]
 8000a4c:	701d      	strb	r5, [r3, #0]
 8000a4e:	e7db      	b.n	8000a08 <_puts_r+0x60>

08000a50 <puts>:
 8000a50:	4b02      	ldr	r3, [pc, #8]	; (8000a5c <puts+0xc>)
 8000a52:	4601      	mov	r1, r0
 8000a54:	6818      	ldr	r0, [r3, #0]
 8000a56:	f7ff bfa7 	b.w	80009a8 <_puts_r>
 8000a5a:	bf00      	nop
 8000a5c:	20000058 	.word	0x20000058

08000a60 <__sread>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	460c      	mov	r4, r1
 8000a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a68:	f000 f8fc 	bl	8000c64 <_read_r>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	bfab      	itete	ge
 8000a70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000a72:	89a3      	ldrhlt	r3, [r4, #12]
 8000a74:	181b      	addge	r3, r3, r0
 8000a76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000a7a:	bfac      	ite	ge
 8000a7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000a7e:	81a3      	strhlt	r3, [r4, #12]
 8000a80:	bd10      	pop	{r4, pc}

08000a82 <__swrite>:
 8000a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a86:	461f      	mov	r7, r3
 8000a88:	898b      	ldrh	r3, [r1, #12]
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	4605      	mov	r5, r0
 8000a8e:	460c      	mov	r4, r1
 8000a90:	4616      	mov	r6, r2
 8000a92:	d505      	bpl.n	8000aa0 <__swrite+0x1e>
 8000a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a98:	2302      	movs	r3, #2
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f000 f8d0 	bl	8000c40 <_lseek_r>
 8000aa0:	89a3      	ldrh	r3, [r4, #12]
 8000aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000aaa:	81a3      	strh	r3, [r4, #12]
 8000aac:	4632      	mov	r2, r6
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4628      	mov	r0, r5
 8000ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ab6:	f000 b8f7 	b.w	8000ca8 <_write_r>

08000aba <__sseek>:
 8000aba:	b510      	push	{r4, lr}
 8000abc:	460c      	mov	r4, r1
 8000abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ac2:	f000 f8bd 	bl	8000c40 <_lseek_r>
 8000ac6:	1c43      	adds	r3, r0, #1
 8000ac8:	89a3      	ldrh	r3, [r4, #12]
 8000aca:	bf15      	itete	ne
 8000acc:	6560      	strne	r0, [r4, #84]	; 0x54
 8000ace:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000ad2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000ad6:	81a3      	strheq	r3, [r4, #12]
 8000ad8:	bf18      	it	ne
 8000ada:	81a3      	strhne	r3, [r4, #12]
 8000adc:	bd10      	pop	{r4, pc}

08000ade <__sclose>:
 8000ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ae2:	f000 b89d 	b.w	8000c20 <_close_r>

08000ae6 <__swbuf_r>:
 8000ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae8:	460e      	mov	r6, r1
 8000aea:	4614      	mov	r4, r2
 8000aec:	4605      	mov	r5, r0
 8000aee:	b118      	cbz	r0, 8000af8 <__swbuf_r+0x12>
 8000af0:	6a03      	ldr	r3, [r0, #32]
 8000af2:	b90b      	cbnz	r3, 8000af8 <__swbuf_r+0x12>
 8000af4:	f7ff ff22 	bl	800093c <__sinit>
 8000af8:	69a3      	ldr	r3, [r4, #24]
 8000afa:	60a3      	str	r3, [r4, #8]
 8000afc:	89a3      	ldrh	r3, [r4, #12]
 8000afe:	071a      	lsls	r2, r3, #28
 8000b00:	d525      	bpl.n	8000b4e <__swbuf_r+0x68>
 8000b02:	6923      	ldr	r3, [r4, #16]
 8000b04:	b31b      	cbz	r3, 8000b4e <__swbuf_r+0x68>
 8000b06:	6823      	ldr	r3, [r4, #0]
 8000b08:	6922      	ldr	r2, [r4, #16]
 8000b0a:	1a98      	subs	r0, r3, r2
 8000b0c:	6963      	ldr	r3, [r4, #20]
 8000b0e:	b2f6      	uxtb	r6, r6
 8000b10:	4283      	cmp	r3, r0
 8000b12:	4637      	mov	r7, r6
 8000b14:	dc04      	bgt.n	8000b20 <__swbuf_r+0x3a>
 8000b16:	4621      	mov	r1, r4
 8000b18:	4628      	mov	r0, r5
 8000b1a:	f000 f9d1 	bl	8000ec0 <_fflush_r>
 8000b1e:	b9e0      	cbnz	r0, 8000b5a <__swbuf_r+0x74>
 8000b20:	68a3      	ldr	r3, [r4, #8]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	60a3      	str	r3, [r4, #8]
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	6022      	str	r2, [r4, #0]
 8000b2c:	701e      	strb	r6, [r3, #0]
 8000b2e:	6962      	ldr	r2, [r4, #20]
 8000b30:	1c43      	adds	r3, r0, #1
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d004      	beq.n	8000b40 <__swbuf_r+0x5a>
 8000b36:	89a3      	ldrh	r3, [r4, #12]
 8000b38:	07db      	lsls	r3, r3, #31
 8000b3a:	d506      	bpl.n	8000b4a <__swbuf_r+0x64>
 8000b3c:	2e0a      	cmp	r6, #10
 8000b3e:	d104      	bne.n	8000b4a <__swbuf_r+0x64>
 8000b40:	4621      	mov	r1, r4
 8000b42:	4628      	mov	r0, r5
 8000b44:	f000 f9bc 	bl	8000ec0 <_fflush_r>
 8000b48:	b938      	cbnz	r0, 8000b5a <__swbuf_r+0x74>
 8000b4a:	4638      	mov	r0, r7
 8000b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b4e:	4621      	mov	r1, r4
 8000b50:	4628      	mov	r0, r5
 8000b52:	f000 f805 	bl	8000b60 <__swsetup_r>
 8000b56:	2800      	cmp	r0, #0
 8000b58:	d0d5      	beq.n	8000b06 <__swbuf_r+0x20>
 8000b5a:	f04f 37ff 	mov.w	r7, #4294967295
 8000b5e:	e7f4      	b.n	8000b4a <__swbuf_r+0x64>

08000b60 <__swsetup_r>:
 8000b60:	b538      	push	{r3, r4, r5, lr}
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <__swsetup_r+0xac>)
 8000b64:	4605      	mov	r5, r0
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	460c      	mov	r4, r1
 8000b6a:	b118      	cbz	r0, 8000b74 <__swsetup_r+0x14>
 8000b6c:	6a03      	ldr	r3, [r0, #32]
 8000b6e:	b90b      	cbnz	r3, 8000b74 <__swsetup_r+0x14>
 8000b70:	f7ff fee4 	bl	800093c <__sinit>
 8000b74:	89a3      	ldrh	r3, [r4, #12]
 8000b76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b7a:	0718      	lsls	r0, r3, #28
 8000b7c:	d422      	bmi.n	8000bc4 <__swsetup_r+0x64>
 8000b7e:	06d9      	lsls	r1, r3, #27
 8000b80:	d407      	bmi.n	8000b92 <__swsetup_r+0x32>
 8000b82:	2309      	movs	r3, #9
 8000b84:	602b      	str	r3, [r5, #0]
 8000b86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b8a:	81a3      	strh	r3, [r4, #12]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	e034      	b.n	8000bfc <__swsetup_r+0x9c>
 8000b92:	0758      	lsls	r0, r3, #29
 8000b94:	d512      	bpl.n	8000bbc <__swsetup_r+0x5c>
 8000b96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b98:	b141      	cbz	r1, 8000bac <__swsetup_r+0x4c>
 8000b9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	d002      	beq.n	8000ba8 <__swsetup_r+0x48>
 8000ba2:	4628      	mov	r0, r5
 8000ba4:	f000 f8c0 	bl	8000d28 <_free_r>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	6363      	str	r3, [r4, #52]	; 0x34
 8000bac:	89a3      	ldrh	r3, [r4, #12]
 8000bae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000bb2:	81a3      	strh	r3, [r4, #12]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	6063      	str	r3, [r4, #4]
 8000bb8:	6923      	ldr	r3, [r4, #16]
 8000bba:	6023      	str	r3, [r4, #0]
 8000bbc:	89a3      	ldrh	r3, [r4, #12]
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	81a3      	strh	r3, [r4, #12]
 8000bc4:	6923      	ldr	r3, [r4, #16]
 8000bc6:	b94b      	cbnz	r3, 8000bdc <__swsetup_r+0x7c>
 8000bc8:	89a3      	ldrh	r3, [r4, #12]
 8000bca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bd2:	d003      	beq.n	8000bdc <__swsetup_r+0x7c>
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	f000 f9c0 	bl	8000f5c <__smakebuf_r>
 8000bdc:	89a0      	ldrh	r0, [r4, #12]
 8000bde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000be2:	f010 0301 	ands.w	r3, r0, #1
 8000be6:	d00a      	beq.n	8000bfe <__swsetup_r+0x9e>
 8000be8:	2300      	movs	r3, #0
 8000bea:	60a3      	str	r3, [r4, #8]
 8000bec:	6963      	ldr	r3, [r4, #20]
 8000bee:	425b      	negs	r3, r3
 8000bf0:	61a3      	str	r3, [r4, #24]
 8000bf2:	6923      	ldr	r3, [r4, #16]
 8000bf4:	b943      	cbnz	r3, 8000c08 <__swsetup_r+0xa8>
 8000bf6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000bfa:	d1c4      	bne.n	8000b86 <__swsetup_r+0x26>
 8000bfc:	bd38      	pop	{r3, r4, r5, pc}
 8000bfe:	0781      	lsls	r1, r0, #30
 8000c00:	bf58      	it	pl
 8000c02:	6963      	ldrpl	r3, [r4, #20]
 8000c04:	60a3      	str	r3, [r4, #8]
 8000c06:	e7f4      	b.n	8000bf2 <__swsetup_r+0x92>
 8000c08:	2000      	movs	r0, #0
 8000c0a:	e7f7      	b.n	8000bfc <__swsetup_r+0x9c>
 8000c0c:	20000058 	.word	0x20000058

08000c10 <memset>:
 8000c10:	4402      	add	r2, r0
 8000c12:	4603      	mov	r3, r0
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d100      	bne.n	8000c1a <memset+0xa>
 8000c18:	4770      	bx	lr
 8000c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8000c1e:	e7f9      	b.n	8000c14 <memset+0x4>

08000c20 <_close_r>:
 8000c20:	b538      	push	{r3, r4, r5, lr}
 8000c22:	4d06      	ldr	r5, [pc, #24]	; (8000c3c <_close_r+0x1c>)
 8000c24:	2300      	movs	r3, #0
 8000c26:	4604      	mov	r4, r0
 8000c28:	4608      	mov	r0, r1
 8000c2a:	602b      	str	r3, [r5, #0]
 8000c2c:	f7ff fcb5 	bl	800059a <_close>
 8000c30:	1c43      	adds	r3, r0, #1
 8000c32:	d102      	bne.n	8000c3a <_close_r+0x1a>
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	b103      	cbz	r3, 8000c3a <_close_r+0x1a>
 8000c38:	6023      	str	r3, [r4, #0]
 8000c3a:	bd38      	pop	{r3, r4, r5, pc}
 8000c3c:	200001c0 	.word	0x200001c0

08000c40 <_lseek_r>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4d07      	ldr	r5, [pc, #28]	; (8000c60 <_lseek_r+0x20>)
 8000c44:	4604      	mov	r4, r0
 8000c46:	4608      	mov	r0, r1
 8000c48:	4611      	mov	r1, r2
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	602a      	str	r2, [r5, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	f7ff fcc7 	bl	80005e2 <_lseek>
 8000c54:	1c43      	adds	r3, r0, #1
 8000c56:	d102      	bne.n	8000c5e <_lseek_r+0x1e>
 8000c58:	682b      	ldr	r3, [r5, #0]
 8000c5a:	b103      	cbz	r3, 8000c5e <_lseek_r+0x1e>
 8000c5c:	6023      	str	r3, [r4, #0]
 8000c5e:	bd38      	pop	{r3, r4, r5, pc}
 8000c60:	200001c0 	.word	0x200001c0

08000c64 <_read_r>:
 8000c64:	b538      	push	{r3, r4, r5, lr}
 8000c66:	4d07      	ldr	r5, [pc, #28]	; (8000c84 <_read_r+0x20>)
 8000c68:	4604      	mov	r4, r0
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	2200      	movs	r2, #0
 8000c70:	602a      	str	r2, [r5, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	f7ff fc58 	bl	8000528 <_read>
 8000c78:	1c43      	adds	r3, r0, #1
 8000c7a:	d102      	bne.n	8000c82 <_read_r+0x1e>
 8000c7c:	682b      	ldr	r3, [r5, #0]
 8000c7e:	b103      	cbz	r3, 8000c82 <_read_r+0x1e>
 8000c80:	6023      	str	r3, [r4, #0]
 8000c82:	bd38      	pop	{r3, r4, r5, pc}
 8000c84:	200001c0 	.word	0x200001c0

08000c88 <_sbrk_r>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	4d06      	ldr	r5, [pc, #24]	; (8000ca4 <_sbrk_r+0x1c>)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4608      	mov	r0, r1
 8000c92:	602b      	str	r3, [r5, #0]
 8000c94:	f7ff fcb2 	bl	80005fc <_sbrk>
 8000c98:	1c43      	adds	r3, r0, #1
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk_r+0x1a>
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	b103      	cbz	r3, 8000ca2 <_sbrk_r+0x1a>
 8000ca0:	6023      	str	r3, [r4, #0]
 8000ca2:	bd38      	pop	{r3, r4, r5, pc}
 8000ca4:	200001c0 	.word	0x200001c0

08000ca8 <_write_r>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	4d07      	ldr	r5, [pc, #28]	; (8000cc8 <_write_r+0x20>)
 8000cac:	4604      	mov	r4, r0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	602a      	str	r2, [r5, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f7ff fc53 	bl	8000562 <_write>
 8000cbc:	1c43      	adds	r3, r0, #1
 8000cbe:	d102      	bne.n	8000cc6 <_write_r+0x1e>
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	b103      	cbz	r3, 8000cc6 <_write_r+0x1e>
 8000cc4:	6023      	str	r3, [r4, #0]
 8000cc6:	bd38      	pop	{r3, r4, r5, pc}
 8000cc8:	200001c0 	.word	0x200001c0

08000ccc <__errno>:
 8000ccc:	4b01      	ldr	r3, [pc, #4]	; (8000cd4 <__errno+0x8>)
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000058 	.word	0x20000058

08000cd8 <__libc_init_array>:
 8000cd8:	b570      	push	{r4, r5, r6, lr}
 8000cda:	4d0d      	ldr	r5, [pc, #52]	; (8000d10 <__libc_init_array+0x38>)
 8000cdc:	4c0d      	ldr	r4, [pc, #52]	; (8000d14 <__libc_init_array+0x3c>)
 8000cde:	1b64      	subs	r4, r4, r5
 8000ce0:	10a4      	asrs	r4, r4, #2
 8000ce2:	2600      	movs	r6, #0
 8000ce4:	42a6      	cmp	r6, r4
 8000ce6:	d109      	bne.n	8000cfc <__libc_init_array+0x24>
 8000ce8:	4d0b      	ldr	r5, [pc, #44]	; (8000d18 <__libc_init_array+0x40>)
 8000cea:	4c0c      	ldr	r4, [pc, #48]	; (8000d1c <__libc_init_array+0x44>)
 8000cec:	f000 f994 	bl	8001018 <_init>
 8000cf0:	1b64      	subs	r4, r4, r5
 8000cf2:	10a4      	asrs	r4, r4, #2
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	42a6      	cmp	r6, r4
 8000cf8:	d105      	bne.n	8000d06 <__libc_init_array+0x2e>
 8000cfa:	bd70      	pop	{r4, r5, r6, pc}
 8000cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d00:	4798      	blx	r3
 8000d02:	3601      	adds	r6, #1
 8000d04:	e7ee      	b.n	8000ce4 <__libc_init_array+0xc>
 8000d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d0a:	4798      	blx	r3
 8000d0c:	3601      	adds	r6, #1
 8000d0e:	e7f2      	b.n	8000cf6 <__libc_init_array+0x1e>
 8000d10:	08001040 	.word	0x08001040
 8000d14:	08001040 	.word	0x08001040
 8000d18:	08001040 	.word	0x08001040
 8000d1c:	08001044 	.word	0x08001044

08000d20 <__retarget_lock_init_recursive>:
 8000d20:	4770      	bx	lr

08000d22 <__retarget_lock_acquire_recursive>:
 8000d22:	4770      	bx	lr

08000d24 <__retarget_lock_release_recursive>:
 8000d24:	4770      	bx	lr
	...

08000d28 <_free_r>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	4605      	mov	r5, r0
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	d041      	beq.n	8000db4 <_free_r+0x8c>
 8000d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d34:	1f0c      	subs	r4, r1, #4
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	bfb8      	it	lt
 8000d3a:	18e4      	addlt	r4, r4, r3
 8000d3c:	f7ff fd66 	bl	800080c <__malloc_lock>
 8000d40:	4a1d      	ldr	r2, [pc, #116]	; (8000db8 <_free_r+0x90>)
 8000d42:	6813      	ldr	r3, [r2, #0]
 8000d44:	b933      	cbnz	r3, 8000d54 <_free_r+0x2c>
 8000d46:	6063      	str	r3, [r4, #4]
 8000d48:	6014      	str	r4, [r2, #0]
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d50:	f7ff bd62 	b.w	8000818 <__malloc_unlock>
 8000d54:	42a3      	cmp	r3, r4
 8000d56:	d908      	bls.n	8000d6a <_free_r+0x42>
 8000d58:	6820      	ldr	r0, [r4, #0]
 8000d5a:	1821      	adds	r1, r4, r0
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	bf01      	itttt	eq
 8000d60:	6819      	ldreq	r1, [r3, #0]
 8000d62:	685b      	ldreq	r3, [r3, #4]
 8000d64:	1809      	addeq	r1, r1, r0
 8000d66:	6021      	streq	r1, [r4, #0]
 8000d68:	e7ed      	b.n	8000d46 <_free_r+0x1e>
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	b10b      	cbz	r3, 8000d74 <_free_r+0x4c>
 8000d70:	42a3      	cmp	r3, r4
 8000d72:	d9fa      	bls.n	8000d6a <_free_r+0x42>
 8000d74:	6811      	ldr	r1, [r2, #0]
 8000d76:	1850      	adds	r0, r2, r1
 8000d78:	42a0      	cmp	r0, r4
 8000d7a:	d10b      	bne.n	8000d94 <_free_r+0x6c>
 8000d7c:	6820      	ldr	r0, [r4, #0]
 8000d7e:	4401      	add	r1, r0
 8000d80:	1850      	adds	r0, r2, r1
 8000d82:	4283      	cmp	r3, r0
 8000d84:	6011      	str	r1, [r2, #0]
 8000d86:	d1e0      	bne.n	8000d4a <_free_r+0x22>
 8000d88:	6818      	ldr	r0, [r3, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	6053      	str	r3, [r2, #4]
 8000d8e:	4408      	add	r0, r1
 8000d90:	6010      	str	r0, [r2, #0]
 8000d92:	e7da      	b.n	8000d4a <_free_r+0x22>
 8000d94:	d902      	bls.n	8000d9c <_free_r+0x74>
 8000d96:	230c      	movs	r3, #12
 8000d98:	602b      	str	r3, [r5, #0]
 8000d9a:	e7d6      	b.n	8000d4a <_free_r+0x22>
 8000d9c:	6820      	ldr	r0, [r4, #0]
 8000d9e:	1821      	adds	r1, r4, r0
 8000da0:	428b      	cmp	r3, r1
 8000da2:	bf04      	itt	eq
 8000da4:	6819      	ldreq	r1, [r3, #0]
 8000da6:	685b      	ldreq	r3, [r3, #4]
 8000da8:	6063      	str	r3, [r4, #4]
 8000daa:	bf04      	itt	eq
 8000dac:	1809      	addeq	r1, r1, r0
 8000dae:	6021      	streq	r1, [r4, #0]
 8000db0:	6054      	str	r4, [r2, #4]
 8000db2:	e7ca      	b.n	8000d4a <_free_r+0x22>
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop
 8000db8:	2000007c 	.word	0x2000007c

08000dbc <__sflush_r>:
 8000dbc:	898a      	ldrh	r2, [r1, #12]
 8000dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc0:	4605      	mov	r5, r0
 8000dc2:	0710      	lsls	r0, r2, #28
 8000dc4:	460c      	mov	r4, r1
 8000dc6:	d457      	bmi.n	8000e78 <__sflush_r+0xbc>
 8000dc8:	684b      	ldr	r3, [r1, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dc04      	bgt.n	8000dd8 <__sflush_r+0x1c>
 8000dce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	dc01      	bgt.n	8000dd8 <__sflush_r+0x1c>
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d0fa      	beq.n	8000dd4 <__sflush_r+0x18>
 8000dde:	2300      	movs	r3, #0
 8000de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000de4:	682f      	ldr	r7, [r5, #0]
 8000de6:	6a21      	ldr	r1, [r4, #32]
 8000de8:	602b      	str	r3, [r5, #0]
 8000dea:	d032      	beq.n	8000e52 <__sflush_r+0x96>
 8000dec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000dee:	89a3      	ldrh	r3, [r4, #12]
 8000df0:	075a      	lsls	r2, r3, #29
 8000df2:	d505      	bpl.n	8000e00 <__sflush_r+0x44>
 8000df4:	6863      	ldr	r3, [r4, #4]
 8000df6:	1ac0      	subs	r0, r0, r3
 8000df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dfa:	b10b      	cbz	r3, 8000e00 <__sflush_r+0x44>
 8000dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dfe:	1ac0      	subs	r0, r0, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	4602      	mov	r2, r0
 8000e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000e06:	6a21      	ldr	r1, [r4, #32]
 8000e08:	4628      	mov	r0, r5
 8000e0a:	47b0      	blx	r6
 8000e0c:	1c43      	adds	r3, r0, #1
 8000e0e:	89a3      	ldrh	r3, [r4, #12]
 8000e10:	d106      	bne.n	8000e20 <__sflush_r+0x64>
 8000e12:	6829      	ldr	r1, [r5, #0]
 8000e14:	291d      	cmp	r1, #29
 8000e16:	d82b      	bhi.n	8000e70 <__sflush_r+0xb4>
 8000e18:	4a28      	ldr	r2, [pc, #160]	; (8000ebc <__sflush_r+0x100>)
 8000e1a:	410a      	asrs	r2, r1
 8000e1c:	07d6      	lsls	r6, r2, #31
 8000e1e:	d427      	bmi.n	8000e70 <__sflush_r+0xb4>
 8000e20:	2200      	movs	r2, #0
 8000e22:	6062      	str	r2, [r4, #4]
 8000e24:	04d9      	lsls	r1, r3, #19
 8000e26:	6922      	ldr	r2, [r4, #16]
 8000e28:	6022      	str	r2, [r4, #0]
 8000e2a:	d504      	bpl.n	8000e36 <__sflush_r+0x7a>
 8000e2c:	1c42      	adds	r2, r0, #1
 8000e2e:	d101      	bne.n	8000e34 <__sflush_r+0x78>
 8000e30:	682b      	ldr	r3, [r5, #0]
 8000e32:	b903      	cbnz	r3, 8000e36 <__sflush_r+0x7a>
 8000e34:	6560      	str	r0, [r4, #84]	; 0x54
 8000e36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e38:	602f      	str	r7, [r5, #0]
 8000e3a:	2900      	cmp	r1, #0
 8000e3c:	d0ca      	beq.n	8000dd4 <__sflush_r+0x18>
 8000e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e42:	4299      	cmp	r1, r3
 8000e44:	d002      	beq.n	8000e4c <__sflush_r+0x90>
 8000e46:	4628      	mov	r0, r5
 8000e48:	f7ff ff6e 	bl	8000d28 <_free_r>
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	6360      	str	r0, [r4, #52]	; 0x34
 8000e50:	e7c1      	b.n	8000dd6 <__sflush_r+0x1a>
 8000e52:	2301      	movs	r3, #1
 8000e54:	4628      	mov	r0, r5
 8000e56:	47b0      	blx	r6
 8000e58:	1c41      	adds	r1, r0, #1
 8000e5a:	d1c8      	bne.n	8000dee <__sflush_r+0x32>
 8000e5c:	682b      	ldr	r3, [r5, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0c5      	beq.n	8000dee <__sflush_r+0x32>
 8000e62:	2b1d      	cmp	r3, #29
 8000e64:	d001      	beq.n	8000e6a <__sflush_r+0xae>
 8000e66:	2b16      	cmp	r3, #22
 8000e68:	d101      	bne.n	8000e6e <__sflush_r+0xb2>
 8000e6a:	602f      	str	r7, [r5, #0]
 8000e6c:	e7b2      	b.n	8000dd4 <__sflush_r+0x18>
 8000e6e:	89a3      	ldrh	r3, [r4, #12]
 8000e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e74:	81a3      	strh	r3, [r4, #12]
 8000e76:	e7ae      	b.n	8000dd6 <__sflush_r+0x1a>
 8000e78:	690f      	ldr	r7, [r1, #16]
 8000e7a:	2f00      	cmp	r7, #0
 8000e7c:	d0aa      	beq.n	8000dd4 <__sflush_r+0x18>
 8000e7e:	0793      	lsls	r3, r2, #30
 8000e80:	680e      	ldr	r6, [r1, #0]
 8000e82:	bf08      	it	eq
 8000e84:	694b      	ldreq	r3, [r1, #20]
 8000e86:	600f      	str	r7, [r1, #0]
 8000e88:	bf18      	it	ne
 8000e8a:	2300      	movne	r3, #0
 8000e8c:	1bf6      	subs	r6, r6, r7
 8000e8e:	608b      	str	r3, [r1, #8]
 8000e90:	2e00      	cmp	r6, #0
 8000e92:	dd9f      	ble.n	8000dd4 <__sflush_r+0x18>
 8000e94:	6a21      	ldr	r1, [r4, #32]
 8000e96:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000e9a:	4633      	mov	r3, r6
 8000e9c:	463a      	mov	r2, r7
 8000e9e:	4628      	mov	r0, r5
 8000ea0:	47e0      	blx	ip
 8000ea2:	2800      	cmp	r0, #0
 8000ea4:	dc06      	bgt.n	8000eb4 <__sflush_r+0xf8>
 8000ea6:	89a3      	ldrh	r3, [r4, #12]
 8000ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eac:	81a3      	strh	r3, [r4, #12]
 8000eae:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb2:	e790      	b.n	8000dd6 <__sflush_r+0x1a>
 8000eb4:	4407      	add	r7, r0
 8000eb6:	1a36      	subs	r6, r6, r0
 8000eb8:	e7ea      	b.n	8000e90 <__sflush_r+0xd4>
 8000eba:	bf00      	nop
 8000ebc:	dfbffffe 	.word	0xdfbffffe

08000ec0 <_fflush_r>:
 8000ec0:	b538      	push	{r3, r4, r5, lr}
 8000ec2:	690b      	ldr	r3, [r1, #16]
 8000ec4:	4605      	mov	r5, r0
 8000ec6:	460c      	mov	r4, r1
 8000ec8:	b913      	cbnz	r3, 8000ed0 <_fflush_r+0x10>
 8000eca:	2500      	movs	r5, #0
 8000ecc:	4628      	mov	r0, r5
 8000ece:	bd38      	pop	{r3, r4, r5, pc}
 8000ed0:	b118      	cbz	r0, 8000eda <_fflush_r+0x1a>
 8000ed2:	6a03      	ldr	r3, [r0, #32]
 8000ed4:	b90b      	cbnz	r3, 8000eda <_fflush_r+0x1a>
 8000ed6:	f7ff fd31 	bl	800093c <__sinit>
 8000eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f3      	beq.n	8000eca <_fflush_r+0xa>
 8000ee2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ee4:	07d0      	lsls	r0, r2, #31
 8000ee6:	d404      	bmi.n	8000ef2 <_fflush_r+0x32>
 8000ee8:	0599      	lsls	r1, r3, #22
 8000eea:	d402      	bmi.n	8000ef2 <_fflush_r+0x32>
 8000eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000eee:	f7ff ff18 	bl	8000d22 <__retarget_lock_acquire_recursive>
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	4621      	mov	r1, r4
 8000ef6:	f7ff ff61 	bl	8000dbc <__sflush_r>
 8000efa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000efc:	07da      	lsls	r2, r3, #31
 8000efe:	4605      	mov	r5, r0
 8000f00:	d4e4      	bmi.n	8000ecc <_fflush_r+0xc>
 8000f02:	89a3      	ldrh	r3, [r4, #12]
 8000f04:	059b      	lsls	r3, r3, #22
 8000f06:	d4e1      	bmi.n	8000ecc <_fflush_r+0xc>
 8000f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000f0a:	f7ff ff0b 	bl	8000d24 <__retarget_lock_release_recursive>
 8000f0e:	e7dd      	b.n	8000ecc <_fflush_r+0xc>

08000f10 <__swhatbuf_r>:
 8000f10:	b570      	push	{r4, r5, r6, lr}
 8000f12:	460c      	mov	r4, r1
 8000f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f18:	2900      	cmp	r1, #0
 8000f1a:	b096      	sub	sp, #88	; 0x58
 8000f1c:	4615      	mov	r5, r2
 8000f1e:	461e      	mov	r6, r3
 8000f20:	da0d      	bge.n	8000f3e <__swhatbuf_r+0x2e>
 8000f22:	89a3      	ldrh	r3, [r4, #12]
 8000f24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000f28:	f04f 0100 	mov.w	r1, #0
 8000f2c:	bf0c      	ite	eq
 8000f2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000f32:	2340      	movne	r3, #64	; 0x40
 8000f34:	2000      	movs	r0, #0
 8000f36:	6031      	str	r1, [r6, #0]
 8000f38:	602b      	str	r3, [r5, #0]
 8000f3a:	b016      	add	sp, #88	; 0x58
 8000f3c:	bd70      	pop	{r4, r5, r6, pc}
 8000f3e:	466a      	mov	r2, sp
 8000f40:	f000 f848 	bl	8000fd4 <_fstat_r>
 8000f44:	2800      	cmp	r0, #0
 8000f46:	dbec      	blt.n	8000f22 <__swhatbuf_r+0x12>
 8000f48:	9901      	ldr	r1, [sp, #4]
 8000f4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000f4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000f52:	4259      	negs	r1, r3
 8000f54:	4159      	adcs	r1, r3
 8000f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5a:	e7eb      	b.n	8000f34 <__swhatbuf_r+0x24>

08000f5c <__smakebuf_r>:
 8000f5c:	898b      	ldrh	r3, [r1, #12]
 8000f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f60:	079d      	lsls	r5, r3, #30
 8000f62:	4606      	mov	r6, r0
 8000f64:	460c      	mov	r4, r1
 8000f66:	d507      	bpl.n	8000f78 <__smakebuf_r+0x1c>
 8000f68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f6c:	6023      	str	r3, [r4, #0]
 8000f6e:	6123      	str	r3, [r4, #16]
 8000f70:	2301      	movs	r3, #1
 8000f72:	6163      	str	r3, [r4, #20]
 8000f74:	b002      	add	sp, #8
 8000f76:	bd70      	pop	{r4, r5, r6, pc}
 8000f78:	ab01      	add	r3, sp, #4
 8000f7a:	466a      	mov	r2, sp
 8000f7c:	f7ff ffc8 	bl	8000f10 <__swhatbuf_r>
 8000f80:	9900      	ldr	r1, [sp, #0]
 8000f82:	4605      	mov	r5, r0
 8000f84:	4630      	mov	r0, r6
 8000f86:	f7ff fbc1 	bl	800070c <_malloc_r>
 8000f8a:	b948      	cbnz	r0, 8000fa0 <__smakebuf_r+0x44>
 8000f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f90:	059a      	lsls	r2, r3, #22
 8000f92:	d4ef      	bmi.n	8000f74 <__smakebuf_r+0x18>
 8000f94:	f023 0303 	bic.w	r3, r3, #3
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	81a3      	strh	r3, [r4, #12]
 8000f9e:	e7e3      	b.n	8000f68 <__smakebuf_r+0xc>
 8000fa0:	89a3      	ldrh	r3, [r4, #12]
 8000fa2:	6020      	str	r0, [r4, #0]
 8000fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa8:	81a3      	strh	r3, [r4, #12]
 8000faa:	9b00      	ldr	r3, [sp, #0]
 8000fac:	6163      	str	r3, [r4, #20]
 8000fae:	9b01      	ldr	r3, [sp, #4]
 8000fb0:	6120      	str	r0, [r4, #16]
 8000fb2:	b15b      	cbz	r3, 8000fcc <__smakebuf_r+0x70>
 8000fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fb8:	4630      	mov	r0, r6
 8000fba:	f000 f81d 	bl	8000ff8 <_isatty_r>
 8000fbe:	b128      	cbz	r0, 8000fcc <__smakebuf_r+0x70>
 8000fc0:	89a3      	ldrh	r3, [r4, #12]
 8000fc2:	f023 0303 	bic.w	r3, r3, #3
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	81a3      	strh	r3, [r4, #12]
 8000fcc:	89a3      	ldrh	r3, [r4, #12]
 8000fce:	431d      	orrs	r5, r3
 8000fd0:	81a5      	strh	r5, [r4, #12]
 8000fd2:	e7cf      	b.n	8000f74 <__smakebuf_r+0x18>

08000fd4 <_fstat_r>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	4d07      	ldr	r5, [pc, #28]	; (8000ff4 <_fstat_r+0x20>)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4604      	mov	r4, r0
 8000fdc:	4608      	mov	r0, r1
 8000fde:	4611      	mov	r1, r2
 8000fe0:	602b      	str	r3, [r5, #0]
 8000fe2:	f7ff fae5 	bl	80005b0 <_fstat>
 8000fe6:	1c43      	adds	r3, r0, #1
 8000fe8:	d102      	bne.n	8000ff0 <_fstat_r+0x1c>
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	b103      	cbz	r3, 8000ff0 <_fstat_r+0x1c>
 8000fee:	6023      	str	r3, [r4, #0]
 8000ff0:	bd38      	pop	{r3, r4, r5, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001c0 	.word	0x200001c0

08000ff8 <_isatty_r>:
 8000ff8:	b538      	push	{r3, r4, r5, lr}
 8000ffa:	4d06      	ldr	r5, [pc, #24]	; (8001014 <_isatty_r+0x1c>)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4604      	mov	r4, r0
 8001000:	4608      	mov	r0, r1
 8001002:	602b      	str	r3, [r5, #0]
 8001004:	f7ff fae3 	bl	80005ce <_isatty>
 8001008:	1c43      	adds	r3, r0, #1
 800100a:	d102      	bne.n	8001012 <_isatty_r+0x1a>
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	b103      	cbz	r3, 8001012 <_isatty_r+0x1a>
 8001010:	6023      	str	r3, [r4, #0]
 8001012:	bd38      	pop	{r3, r4, r5, pc}
 8001014:	200001c0 	.word	0x200001c0

08001018 <_init>:
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	bf00      	nop
 800101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101e:	bc08      	pop	{r3}
 8001020:	469e      	mov	lr, r3
 8001022:	4770      	bx	lr

08001024 <_fini>:
 8001024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001026:	bf00      	nop
 8001028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102a:	bc08      	pop	{r3}
 800102c:	469e      	mov	lr, r3
 800102e:	4770      	bx	lr
